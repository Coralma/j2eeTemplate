angular.module('cccis.angular.common.business-components.closeBtn', ['cccis.angular.common.components.dialog']);


'use strict';
angular.module('cccis.angular.common.businessComponents.codeTable', ['cccis.angular.common.utils', 'cccis.angular.common.components.inputField']);

'use strict';
angular.module('cccis.angular.common.businessComponents.interceptor', ['cccis.angular.common.utils']);

'use strict';
angular.module('cccis.angular.common.businessComponents.localArea', ['cccis.angular.common.utils', 'cccis.angular.common.components.inputField']);

angular.module('cccis.angular.common.businessComponents.model-validation', []);


angular.module('cccis.angular.common.components.dialog', []);



angular.module('cccis.angular.common.components.grid', []);


angular.module('cccis.angular.common.components.inputField', ['ui.bootstrap', 'ui.select', 'ui.bootstrap.datetimepicker', 'ngSanitize']);


angular.module('cccis.angular.common.components.loadingMask', []);



angular.module('cccis.angular.common.components.notify', []);



angular.module('cccis.angular.common.components.panel', []);


angular.module('cccis.angular.common.utils', ['restangular']);


'use strict';
/**
 * CloseBtn: 用于form表单验证的场景，提供关闭按钮后的用户变更验证
 */
angular.module('cccis.angular.common.business-components.closeBtn').directive('cccisCloseBtn', ['$q', 'cccisCommonDialogProvider',
    function ($q, cccisCommonDialogProvider) {
        return {
            restrict: 'E',
            transclude: true,
            replace: true,
            require: '^form',
            scope: {
                ngId: '@',//input id值
                caption: '@', //按钮文本
                dirtyFormCheck: '@', //是否需要做脏表单检查
                confirmMessage: '@', //自定义提示消息
                onCloseBtnClick: '=' //触发的逻辑
            },
            template: '' +
            '<input type="button" class="btn btn-primary" value="{{caption}}" ng-click="onBtnClicked()">' +
            '</input>',
            link: function ($scope, $element, $attrs, $ngModelCtrl) {
                $scope.onLoad = function () {
                    $scope.caption = $scope.caption || '关 闭';
                    $scope.dirtyFormCheck = $scope.dirtyFormCheck || 'true';
                    $scope.confirmMsg = $scope.confirmMsg || '您有未保存数据，确认离开此页面？';
                };

                $scope.onBtnClicked = function () {
                    var deferred = $q.defer();
                    if ($scope.dirtyFormCheck == 'true' && $ngModelCtrl.$dirty) {
                        cccisCommonDialogProvider.confirm($scope.confirmMsg).then(function (result) {
                            if (result == true) {
                                deferred.resolve(true);
                            } else {
                                deferred.resolve(false);
                            }
                        });
                    } else {
                        deferred.resolve(true);
                    }

                    deferred.promise.then(function(result){
                        if(result == true){
                            $scope.onCloseBtnClick();
                        }
                    });
                };

                $scope.onLoad();
            }
        }
    }])
;
'use strict';
angular.module('cccis.angular.common.businessComponents.codeTable').directive('cccisCodeTableField', ['cccisCodeTableUtils', function (cccisCodeTableUtils) {
    return {
        require: 'ngModel',
        restrict: 'E',
        replace: false,
        scope: {
            ngModel: '=',           //codeId
            searchTitle: '@',
            codeTypeId: '@',
            hasEmptyOptionFlag: '@',//是否有空行（查询界面使用）
            emptyOptionText: '@',//空行对应的文本
            beforeOptionSelected: '=',//选中option之前触发
            onAfterOptionSelected: '=',//选中option之后触发
        },
        link: function ($scope, $element, $attrs, ngModelCtrl) {

            $scope.onLoad = function () {
                if ($scope.codeTypeId) {
                    var codes = cccisCodeTableUtils.getCodesByType($scope.codeTypeId);
                    codes = _.sortBy(codes, ['codeId']);
                    if ($scope.hasEmptyOptionFlag == 'true') {
                        codes.unshift({codeId: null, text: $scope.emptyOptionText || $scope.searchTitle || ''});
                    }
                    $scope.codes = codes;

                    $scope.$watch('ngModel', function(){
                        var found = _.find($scope.codes, {codeId: $scope.ngModel});
                        $scope.codeModel = found;
                    });

                    $scope.$watch('codeModel', function(){
                        $scope.ngModel = $scope.codeModel?$scope.codeModel.codeId:null;
                    });
                }
            };

            $scope.onLoad();
        },
        template: '' +
        '<dropdown-field ng-model="codeModel" search-title="{{searchTitle}}" search-enabled="false" option-list="codes" option-value="codeId" option-text="text">' +
        '</dropdown-field>'
    }
}]);
'use strict';
angular.module('cccis.angular.common.businessComponents.codeTable').filter('cccisCodeTableFilter', ['cccisCodeTableUtils', function (cccisCodeTableUtils) {
    return function (codeId, codeTypeId) {
        return cccisCodeTableUtils.getCodeValueByTypeAndCode(codeTypeId, codeId);
    };
}]);
angular.module('cccis.angular.common.businessComponents.interceptor').factory('cccisHttpCacheInterceptor', ['$q',
    function ($q) {
        return {
            request: function (request) {
                var version = localStorage.getItem('version') || _.uniqueId();
                // 包含template/或.tpl.html关键字的请求URL, 表示为模板代码,不是真实的网页,需要过滤不请求服务器
                if (request.url.indexOf('template/')<0 && request.url.indexOf('templates/')<0 && request.url.indexOf('.tpl.html')<0) {
                    if (request.url.indexOf('?')>=0) {
                        request.url += '&_t=' + version;
                    } else {
                        request.url += "?_t=" + version;
                    }
                }
                return $q.when(request);
            }
        }
    }]);
'use strict';
angular.module('cccis.angular.common.businessComponents.localArea').filter('cccisLocalAreaDetailAddressFilter', ['cccisLocalAreaUtils', function (cccisLocalAreaUtils) {
    return function (addressType) {
        return cccisLocalAreaUtils.buildWholeLocalAddress(addressType);
    };
}]);
angular.module('cccis.angular.common.businessComponents.model-validation').factory('cccisBaseValidateMethodProvider', function () {
    var require = function (model, name, flag) {
        if (flag == false) {
            return [];
        }
        if (model == null || model === "") {
            return [name + '不能为空。'];
        }
        return [];
    };

    var minLength = function (model, min, name) {
        if (typeof model !== 'string') return null;
        if (model.length >= min) return null;
        return [that.getName(name) + '至少' + min + '个字符'];
    };

    var maxLength = function (model, max, name) {
        if (typeof model !== 'string') return null;
        if (model.length <= max) return null;
        return [that.getName(name) + '最长' + max + '个字符'];
    };

    return {
        require: require,
        minLength: minLength,
        maxLength: maxLength,
    }
})


angular.module('cccis.angular.common.businessComponents.model-validation').directive('cccisControlName', ['cccisModelValidation', '$timeout', function (cccisModelValidation, $timeout) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                $(element).on('change', function (e) {
                    if (!cccisModelValidation.isValidationProcessed()) return;

                    $timeout(function(){
                        var controlName = $(element).attr('control-name');
                        var result=cccisModelValidation.validateControl(controlName);
                    });
                });
            }
        }
    }])

angular.module('cccis.angular.common.businessComponents.model-validation').factory('cccisModelValidation', ['cccisModelValidationResultService', '$injector', function (cccisModelValidationResultService, $injector) {
    var validationModelMame; //需要验证的目标模型
    var validators = []; //在addValidator中build
    var controlMap = {}; //key:controlName（目前认为controlName是唯一的）, value: validator list; 在addValidator中build，用于快速获取界面控件
    var validateMethodProvider;
    var afterValidationCallback; //validation的回调函数
    var isValidationProcessedFlagMap = {}; //检查某种（nodeName）是否进行过validation {key:node , value: type}

    var VALIDATOR_SEQ = 1;

    var setValidateMethodProvider = function (_validateMethodProvider) {
        validateMethodProvider = _validateMethodProvider;
    };

    var buildControlMap = function () {
        controlMap = {};
        _.each(validators, function (validator) {
            var controlName = validator.controlName;
            if (!controlMap[controlName]) {
                controlMap[controlName] = [];
            }
            controlMap[controlName].push(validator);
        });
    };

    /**
     * 界面打开，需要初始化Validation
     */
    var initValidator = function (_validationModelMame, _validatorConfigs, _afterValidationCallback) {
        isValidationProcessedFlagMap = {};
        validators = [];

        validationModelMame = _validationModelMame;
        addValidators(_validatorConfigs);
        afterValidationCallback = _afterValidationCallback;
    };

    /**
     * 是否已做个validation
     */
    var isValidationProcessed = function () {
        var processed = false;
        _.each(isValidationProcessedFlagMap, function (node, validationType) {
            if (node) {
                processed = true;
            }
        });
        return processed;
    };

    var isNodeValidationProcessed = function (validationNode) {
        var processed = false;
        _.each(isValidationProcessedFlagMap, function (node, validationType) {
            if (validationNode == node) {
                processed = true;
            }
        });

        return processed;
    };

    var addValidators = function (validatorConfigs) {
        var _this = this;
        _.each(validatorConfigs, function (validatorConfig) {
            addValidator.apply(_this, validatorConfig);
        });
        buildControlMap();
    };

    var addValidator = function (tabName, controlName, nodes, errorType, validatorMethodName, validatorMethodParams) {
        var validator = {
            seq: VALIDATOR_SEQ,
            tabName: tabName,           //tab页签的key
            controlName: controlName,   //输入控件的control-name属性,唯一
            nodes: nodes, //验证环节
            errorType: errorType,   //错误类型：error/warning
            validatorMethodName: validatorMethodName,   //执行验证validation的方法名
            validatorMethodParams: validatorMethodParams, //执行验证validation的参数列表
            control: null,   //和UI输入控件进行绑定后的输入控件dom element
            errorMsgArray: [], //错误消息的message
        };

        VALIDATOR_SEQ++;
        validators.push(validator);
    };

    /**
     * 根据controlName清除validator（精确匹配）
     */
    var clearValidatorsByControls = function (tabName, controlNames) {
        var allRemovedValidators = null;
        if (!tabName) {
            allRemovedValidators = validators;
            validators = [];
        } else {
            _.each(controlNames, function (controlName) {
                var removedValidators = _.remove(validators, function (validator) {
                    return validator.tabName == tabName && validator.controlName == controlName;
                })
                allRemovedValidators = _.union(allRemovedValidators, removedValidators);
            });
        }
        _.each(allRemovedValidators, function (validator) {
            cccisModelValidationResultService.remove(validator);
        });

        if (afterValidationCallback) {
            _.each(isValidationProcessedFlagMap, function (value, node) {
                if (value == true) {
                    afterValidationCallback(false, node, cccisModelValidationResultService.getResult());
                }
            });
        }

        buildControlMap();
    };


    /**
     * 将validator和界面控件绑定
     * 界面控件一旦有增删，必须调用该方法
     * @param tabName
     */
    var bindValidatorWithUIContent = function (contentClassName) {
        var startTime = _.now();
        var controls = [];
        if (contentClassName) {
            controls = $('[control-name]', '.' + contentClassName);
        } else {
            controls = $('[control-name]');
        }

        _.each(controls, function (control) {
            //根据当前控件的属性，从controlMap中获取当前控件对应的validation
            var $control = $(control);
            var controlName = $control.attr('control-name');
            var validators = controlMap[controlName];
            if (validators) {
                //绑定UI control和validator
                _.each(validators, function (validator) {
                    validator.control = $control;
                    cccisModelValidationResultService.refresh(validator);
                })
            } else {
                //console.log('could not find validatorControl for ' + controlName);
            }
        });
        var endTime = _.now();
        console.log('bindValidatorWithUIContent cost:' + (endTime - startTime) + 'ms');
    };

    /**
     * 将validator和界面控件绑定
     * 界面控件一旦有增删，必须调用该方法
     * @param tabName
     */
    var bindValidatorWithTabControls = function (tabName) {
        var startTime = _.now();
        var controls = [];
        if (tabName) {
            controls = $('[control-name]', 'div[ui-view=' + tabName + ']');
        } else {
            controls = $('[control-name]', 'div[ui-view]');
        }

        _.each(controls, function (control) {
            //根据当前控件的属性，从controlMap中获取当前控件对应的validation
            var $control = $(control);
            var controlName = $control.attr('control-name');
            var validators = controlMap[controlName];
            if (validators) {
                //绑定UI control和validator
                _.each(validators, function (validator) {
                    validator.control = $control;
                    cccisModelValidationResultService.refresh(validator);
                })
            } else {
                //console.log('could not find validatorControl for ' + controlName);
            }
        });
        var endTime = _.now();
        console.log('bindValidatorWithTabControls cost:' + (endTime - startTime) + 'ms');
    };

    /**
     * 执行一条验证内容
     */
    var processValidation = function (validator, currentNode) {
        if (!validationModelMame) {
            return true;
        }
        //
        // if(_.startsWith(validator.controlName, 'unitPrice')){
        //     debugger;
        // }

        //检查validator是否适配当前验证环节
        var inNodeFlag = false;
        if (currentNode) {
            inNodeFlag = _.find(validator.nodes, function (validateNode) {
                return currentNode == validateNode;
            });
        } else {
            inNodeFlag = _.find(validator.nodes, function (validateNode) {
                var processedFlag = false;
                _.each(isValidationProcessedFlagMap, function (node, validationType) {
                    if (node == validateNode) {
                        processedFlag = true;
                    }
                });
                return processedFlag == true;
            });
        }


        if (!inNodeFlag) {
            return true;
        }

        //step1: 获取数据模型
        window[validationModelMame] = $injector.get(validationModelMame);

        //step2:获取对应的验证方法
        var method = validateMethodProvider[validator.validatorMethodName];
        if (method == null) {
            debugger;
            console.log("could not find validator method:" + validator.validatorMethodName);
            return true;
        }

        //step3:解析验证方法参数
        var paramValues = [];
        _.each(validator.validatorMethodParams, function (param) {
            // console.log("param:"+param);
            var paramValue = eval(param);
            // console.log("param:"+param+", paramValue:"+paramValue);
            paramValues.push(paramValue);
        });

        //step4:执行验证
        var msg = validateMethodProvider[validator.validatorMethodName].apply(this, paramValues);

        //step5:处理验证结果
        var valid = false;
        if (msg && msg.length > 0) { //message都是数组格式
            validator.errorMsgArray = msg;
            valid = false;
        } else {
            valid = true;
        }

        //step6:移除数据模型
        delete window[validationModelMame];

        return valid;
    };

    var validateControlBySuffix = function (controlNameSuffix, noCallbackFlag) {
        _.each(controlMap, function (value, key) {
            if (_.endsWith(key, controlNameSuffix)) {
                validateControl(key, true);
            }
        });

        if (afterValidationCallback && noCallbackFlag == false) {
            _.each(isValidationProcessedFlagMap, function (node, validationType) {
                if (node) {
                    afterValidationCallback(false, node, cccisModelValidationResultService.getResult());
                }
            });
        }
    };

    /**
     * 基于后端Validation. 标记当前控件出错样式（仅仅样式处理，当前台做过编辑后，样式会立即恢复）
     * 注意：当前controlName必须存在于validate-method-provider中
     */
    var setControlInvalidate = function (controlName, errorType) {
        errorType = errorType||'errors';

        var validators = controlMap[controlName];
        if (validators.length > 0) {
            cccisModelValidationResultService.setControlInvalidate(validators[0].control, errorType);
        }
    };

    /**
     *基于后端Validation. 清除当前控件出错样式（即点击重置按钮后，去除输入框边框样式）
     */
    var setControlValidate = function (controlName, errorType) {
        errorType = errorType||'errors';

        var validators = controlMap[controlName];
        if (validators.length > 0) {
            cccisModelValidationResultService.setControlValidate(validators[0].control, errorType);
        }
    };


    /**
     * 基于UI控件的controlName，对控件进行验证
     * 一般发生在onchange事件后
     */
    var validateControl = function (controlName, noCallbackFlag) {
        //一旦做过任何validation，就要校验界面控件
        var isValidationProcessedFlag = _.find(isValidationProcessedFlagMap, function (validationNode, validationType) {
            if (validationNode) {
                return true;
            } else {
                return false;
            }
        });
        if (!isValidationProcessedFlag) {
            return;
        }

        //step1: 对当前控件进行校验
        var validators = controlMap[controlName];
        if (validators) {
            //执行validator
            _.each(validators, function (validator) {
                var valid = processValidation(validator);
                if (!valid) {
                    _.each(isValidationProcessedFlagMap, function (validationNode, validationType) {
                        if (validationNode) {
                            if (_.includes(validator.nodes, validationNode)) {
                                cccisModelValidationResultService.add(validator, validationType);
                            }
                        }
                    });
                } else {
                    _.each(isValidationProcessedFlagMap, function (validationNode, validationType) {
                        if (validationNode) {
                            if (_.includes(validator.nodes, validationNode)) {
                                cccisModelValidationResultService.remove(validator, validationType);
                            }
                        }
                    });
                }
            })

        } else {
            console.log('could not find validatorControl for ' + controlName);
        }
        //step2:对关联控件进行校验
        var controlElem = $('[control-name=' + controlName + ']');
        var triggerAttr = controlElem.attr('validation-trigger'); //应该是['','']的格式
        if (triggerAttr) {
            //var triggerControlNames = JSON.parse(triggerAttr);
            var triggerControlNames = eval(triggerAttr);
            _.each(triggerControlNames, function (triggerControlName) {
                validateControl(triggerControlName);
            })
        }

        //对于已经做过validation的环节，全部重做。
        //TODO yangsh：如果没有涉及的validationType，可以考虑不做，不过对性能基本没啥影响
        if (afterValidationCallback && noCallbackFlag != true) {
            _.each(isValidationProcessedFlagMap, function (validationNode, validationType) {
                if (validationNode) {
                    afterValidationCallback(false, validationType, validationNode, cccisModelValidationResultService.getResult());
                }
            });
        }
    }

    /**
     * 基于整个数据模型进行验证(仅适配当前环节)
     * 一般发生在对某一validationType做校的时候
     */
    var executeValidation = function (validationType, validationNode, actionNode) {
        if (!validationType) alert('validationType should not be null');
        if (!validationNode) alert('validationNode should not be null');

        //针对保存验证的特殊处理，如果之前点击过提交验证，那么保存操作的时候，也做提交验证。但是actionNode会记成保存
        if (!actionNode) {
            actionNode = validationNode;
        }

        this.resetValidation(validationType);

        //记录该validationType已进行过validation
        isValidationProcessedFlagMap[validationType] = validationNode;

        //遍历所有的validator，执行模型验证
        _.each(validators, function (validator) {
            //step1:执行验证
            var valid = processValidation(validator, validationNode);

            //step2:处理验证结果
            if (!valid) {
                cccisModelValidationResultService.add(validator, validationType);
            }
        });

        if (afterValidationCallback) {
            afterValidationCallback(true, validationType, actionNode, cccisModelValidationResultService.getResult());//full validation, validation results;
        }

        return cccisModelValidationResultService.getResult();
    };

    var resetValidation = function (validationType) {
        isValidationProcessedFlagMap[validationType] = null;
        cccisModelValidationResultService.resetValidationResult(validationType);
    };


    return {
        isValidationProcessed: isValidationProcessed,
        isNodeValidationProcessed: isNodeValidationProcessed,
        initValidator: initValidator,
        clearValidatorsByControls: clearValidatorsByControls,
        addValidators: addValidators,
        bindValidatorWithUIContent: bindValidatorWithUIContent,
        bindValidatorWithTabControls: bindValidatorWithTabControls,
        setValidateMethodProvider: setValidateMethodProvider,
        executeValidation: executeValidation,
        resetValidation: resetValidation,
        validateControl: validateControl,
        validateControlBySuffix: validateControlBySuffix,
        setControlInvalidate: setControlInvalidate,
        setControlValidate: setControlValidate
    }
}])



angular.module('cccis.angular.common.businessComponents.model-validation').factory('cccisModelValidationResultService', ['$timeout', '$interval', '$q', function ($timeout, $interval, $q) {
    var getValidationItemCount = function (validationType, errorType) {
        return getValidators(validationType, errorType).length;
    };

    var getValidationMsgCount = function (validationType, errorType) {
        var count = 0;
        var errorValidators = getValidators(validationType, errorType);
        _.each(errorValidators, function(errorValidator){
            count = count + errorValidator.errorMsgArray.length;
        });

        return count;
    };

    var getValidators = function (validationType, errorType) {
        var validators = _.filter(result.validatorResultMap[validationType], function (validator) {
            if (validator.errorType != errorType) {
                return false;
            }
            return true;
        });
        return validators;
    };


    var getResult = function () {
        _.each(result.validatorResultMap, function(validators, type){
            result.validatorResultMap[type]=_.sortBy(validators, ['seq', 'validatorMethodName']);
        });

        return result;
    };

    var refresh = function(validator){
        //validator没有绑定界面控件
        if (!validator || !validator.control) {
            return;
        }

        var included = false;
        _.each(result.validatorResultMap, function(validators){
           if( _.include(validators, validator)){
               included = true;
           }
        });

        if (included) {
            //UI处理
            if (validator.errorType == 'errors') {
                $(validator.control).addClass('cccis-model-validation-data-error');
            }
            if (validator.errorType == 'warnings') {
                $(validator.control).addClass('cccis-model-validation-data-warning');
            }
        }
    };

    var add = function (validator, validationType) {
        if (!validator) {
            return;
        }

        var foundValidator = _.find(result.validatorResultMap[validationType], function(item){
            return item.tabName == validator.tabName && item.controlName == validator.controlName &&item.errorType == validator.errorType &&item.validatorMethodName == validator.validatorMethodName && item.seq == validator.seq;
        });
        if(!foundValidator){
            if(!result.validatorResultMap[validationType]){
                result.validatorResultMap[validationType] = [];
            }
            result.validatorResultMap[validationType].push(validator);
        }

        //UI处理
        if (validator.control) {
            setControlInvalidate($(validator.control), validator.errorType);
        }
    };

    var setControlInvalidate = function(control, errorType){
        if (errorType == 'errors') {
            $(control).addClass('cccis-model-validation-data-error');
        }
        if (errorType == 'warnings') {
            $(control).addClass('cccis-model-validation-data-warning');
        }
    };

    /**
     *  清除指定环节的所有错误结果
     */
    var resetValidationResult = function(validationType){
        var removeList = result.validatorResultMap[validationType];
        result.validatorResultMap[validationType] = [];

        //必须用中间变量，否则下标会错乱
        _.each(removeList, function(validator){
            remove(validator, validationType);
        });
    };

    var remove = function (validator, validationType) {
        if (!validator) {
            return;
        }

        if(validationType!=null){
            _.remove(result.validatorResultMap[validationType], function (item) {
                return item.tabName == validator.tabName && item.controlName == validator.controlName && item.errorType == validator.errorType && item.validatorMethodName == validator.validatorMethodName && item.seq == validator.seq;
            });
        }else{
            _.each(result.validatorResultMap, function(validators){
                _.remove(validators, function (item) {
                    return item.tabName == validator.tabName && item.controlName == validator.controlName && item.errorType == validator.errorType && item.validatorMethodName == validator.validatorMethodName && item.seq == validator.seq;
                });
            });
        }

        //UI处理
        if (validator.control) {
            var foundControlHasOtherError = false;

            _.each(result.validatorResultMap, function(validators){
                var found = _.find(validators, function (item) {
                    return item.tabName == validator.tabName && item.controlName == validator.controlName && item.errorType == validator.errorType;
                });
                if(found){
                    foundControlHasOtherError = true;
                }
            });

            //如果存在其他错误情况，则不能移除错误样式
            if (foundControlHasOtherError) {
                return;
            }

            //UI处理
            if (validator.control) {
                setControlValidate($(validator.control), validator.errorType);
            }
        }
    };
    //对于后端验证，一出错误样式（即，去除输入框边框样式）
    var setControlValidate = function(control, errorType) {
        if (errorType == 'errors') {
            $(control).removeClass('cccis-model-validation-data-error');
        }
        if (errorType == 'warnings') {
            $(control).removeClass('cccis-model-validation-data-warning');
        }
    };


    //全局的model validation result
    var result = {
        validatorResultMap: {}, //验证失败的validator, {validationType: []}
        getValidationItemCount: getValidationItemCount, //根据错误类型，返回验证失败的数量
        getValidationMsgCount: getValidationMsgCount,//根据错误类型，返回验证失败的消息数量
        getValidators: getValidators,//根据错误类型，返回验证失败的验证器
    };

    return {
        getResult: getResult,
        resetValidationResult: resetValidationResult,
        add: add,
        remove: remove,
        refresh: refresh,
        setControlInvalidate:setControlInvalidate,
        setControlValidate: setControlValidate
    };
}])




angular.module('cccis.angular.common.businessComponents.model-validation').controller('cccisValidationResultDialogCtrl', ['$scope', '$timeout', '$q', '$parentScope','$interval',
    function ($scope, $timeout, $q, $parentScope, $interval) {
        $scope.init = function () {
        };
        
        $scope.setAllowSubmitFlag = function(allowSubmitFlag, submitFunc){
            $scope.allowSubmitFlag = allowSubmitFlag;
            $scope.submitFunc = submitFunc;
        };

        $scope.setValidationResult =  function(isMultiValidationTypeFlag, validationType, result, allowSubmit, submitFunc){
            $scope.isMultiValidationTypeFlag = isMultiValidationTypeFlag;
            $scope.validationErrorResultMap = $scope.validationErrorResultMap || {};

            var currentValidationTypeResult = $scope.validationErrorResultMap[validationType.key];
            if($scope.validationErrorResultMap[validationType.key]){
                currentValidationTypeResult = $scope.validationErrorResultMap[validationType.key];
            }else{
                currentValidationTypeResult = {title: '', errorNum:0, warningNum:0, errors: {}, warnings: {}};
                $scope.validationErrorResultMap[validationType.key] = currentValidationTypeResult;
            }

            currentValidationTypeResult.key = validationType.key;
            currentValidationTypeResult.title=validationType.text;
            currentValidationTypeResult.errorNum = result.getValidationItemCount(validationType.key, 'errors');
            currentValidationTypeResult.warningNum = result.getValidationItemCount(validationType.key, 'warnings');
            currentValidationTypeResult.submitFunc = submitFunc;
            currentValidationTypeResult.showDividingLineFlag = currentValidationTypeResult.errorNum && currentValidationTypeResult.warningNum;
            currentValidationTypeResult.errors = {};
            currentValidationTypeResult.warnings = {};

            var tabHeadingMap = {};
            if($parentScope && $parentScope.tabs){
                _.each($parentScope.tabs, function(obj){
                    tabHeadingMap[obj.templateUrl] = obj.heading;
                })
            }

            _.each(result.validatorResultMap[validationType.key], function (validator) {
                //过滤和本validationType无无关的validator
                var included = _.find(validator.nodes, function(validateNode){
                    return _.startsWith(validateNode, validationType.key);
                });
                if(!included){
                    return;
                }

                //构建对话框内容
                var heading = tabHeadingMap[validator.tabName]==null?validator.tabName:tabHeadingMap[validator.tabName];
                currentValidationTypeResult[validator.errorType][heading] = currentValidationTypeResult[validator.errorType][heading] || [];
                currentValidationTypeResult[validator.errorType][heading].push(validator);
            });

            $timeout(function () {
                var $alt = $('#msg-id-' + currentValidationTypeResult.key);
                if ($alt.length > 0) {
                    $alt[0].scrollIntoView(true);
                }
            });
        };

        $scope.locateValidator = function (validator) {
            if (!validator) {
                return;
            }
            var deferred = $q.defer();
            if (validator.tabName && $parentScope.enterTab) {
                $parentScope.enterTab(validator.tabName).then(function () {
                    deferred.resolve(true);
                });
            } else {
                deferred.resolve(true);
            }
            deferred.promise.then(function () {
                $scope.notice(validator.control);
            });
        };

        $scope.notice = function ($elem) {
            if (!$elem) {
                return;
            }

            var $row;
            // check in grid
            var inGrid = $elem.attr('in-grid');
            if (!angular.isUndefined(inGrid)) {
                $row = $elem.closest('tr');
            }

            $elem[0].scrollIntoView(false);

            var times = 5;
            var highlightFlag = false;
            var interval = $interval(function () {
                times--;
                highlightFlag = !highlightFlag;
                if (times < 0) {
                    $interval.cancel(interval);
                }
                // 闪动并引起用户注意
                if ($row) {
                    //Grid内部，整行闪烁
                    if (highlightFlag) {
                        $row.addClass('flashing');
                    } else {
                        $row.removeClass('flashing');
                    }
                }else {
                    //单个输入框，直接闪烁
                    if (highlightFlag) {
                        $elem.addClass('flashing');
                    } else {
                        $elem.removeClass('flashing');
                    }
                }
            }, 250);
        };
        
        $scope.init();
    }]);
'use strict';
angular.module('cccis.angular.common.components.dialog').controller('cccisAlertCtrl', ['$scope', 'content', function ($scope, content) {
    $scope.content = content;
    $scope.result = null;
    $scope.closeAlert = function () {
        $scope.result = true;
        $scope.dialogApi.close();
    }
}]);
angular.module('cccis.angular.common.components.dialog').controller('cccisAppErrorDialogCtrl', ['$scope', 'content', function ($scope, content) {
    $scope.content = content;
    $scope.result = null;
    $scope.closeAlert = function () {
        $scope.result = true;
        $scope.dialogApi.close();
    }
}]);
angular.module('cccis.angular.common.components.dialog').controller('cccisConfirmCtrl', ['$scope', 'content', 'data', function ($scope, content, data) {
    $scope.content = content;
    $scope.data = data;
    $scope.result = null;
    $scope.confirm = function () {
        $scope.result = true;
        $scope.dialogApi.close();
    };
    $scope.cancel = function () {
        $scope.result = false;
        $scope.dialogApi.close();
    };
}]);
angular.module('cccis.angular.common.components.dialog').factory('cccisCommonDialogProvider', ['cccisDialogProvider','$q', function (cccisDialogProvider,$q) {
    return {
        alert: function (content, dialogOptions) {
            var defered = $q.defer();
            cccisDialogProvider.openDialog({
                    templateUrl: 'common/components/dialog/dialog-alert.tpl.html',
                    controllerName: 'cccisAlertCtrl',
                    resolves: {
                        content: content
                    },
                    options: {
                        title: dialogOptions == null || dialogOptions.title == null ? '' : dialogOptions.title,
                        width: dialogOptions == null || dialogOptions.width == null ? '400px' : dialogOptions.width,
                        height: dialogOptions == null || dialogOptions.height == null ? '180px' : dialogOptions.height,
                        modal: true,
                        collapsible: dialogOptions == null || dialogOptions.title == null ? false : dialogOptions.collapsible,
                        enableDrag: dialogOptions == null || dialogOptions.enableDrag == null ? true : dialogOptions.enableDrag,
                        sizeType: dialogOptions == null || dialogOptions.sizeType == null ? 'small' : dialogOptions.sizeType,
                        dialogCls: 'cccis-common-dialog cccis-alert-dialog'
                    }
                }).then(function ($dialogScope) {
                     $dialogScope.onDialogClose = function(){
                         defered.resolve($dialogScope.result);
                     }
            });
                return defered.promise;
        },
        confirm: function (content, dialogOptions, data) {
            var defered = $q.defer();
            dialogOptions = dialogOptions || {};
            cccisDialogProvider.openDialog({
                templateUrl: 'common/components/dialog/dialog-confirm.tpl.html',
                controllerName: 'cccisConfirmCtrl',
                options: angular.extend({
                    title: dialogOptions == null || dialogOptions.title == null ? '' : dialogOptions.title,
                    width: dialogOptions == null || dialogOptions.width == null ? '400px' : dialogOptions.width,
                    height: dialogOptions == null || dialogOptions.height == null ? '180px' : dialogOptions.height,
                    modal: true,
                    collapsible: dialogOptions == null || dialogOptions.title == null ? false : dialogOptions.collapsible,
                    enableDrag: dialogOptions == null || dialogOptions.enableDrag == null ? true : dialogOptions.enableDrag,
                    sizeType: dialogOptions == null || dialogOptions.sizeType == null ? 'small' : dialogOptions.sizeType,
                    dialogCls: 'cccis-common-dialog cccis-confirm-dialog'
                }, dialogOptions),
                resolves: {
                    data: angular.extend({}, data),
                    content: content
                }
            }).then(function($dialogScope){
                $dialogScope.onDialogClose = function(){
                    defered.resolve($dialogScope.result);
                }
            });
            return defered.promise;
        },

        showAppErrorDialog: function (content, dialogOptions) {
            return cccisDialogProvider.openDialog({
                    templateUrl: 'common/components/dialog/dialog-alert.tpl.html',
                    controllerName: 'cccisAppErrorDialogCtrl',
                    resolves: {
                        content: content
                    },
                    options: {
                        title: dialogOptions == null || dialogOptions.title == null ? '注意' : dialogOptions.title,
                        width: dialogOptions == null || dialogOptions.width == null ? '400px' : dialogOptions.width,
                        height: dialogOptions == null || dialogOptions.height == null ? '180px' : dialogOptions.height,
                        modal: true,
                        collapsible: dialogOptions == null || dialogOptions.title == null ? false : dialogOptions.collapsible,
                        enableDrag: dialogOptions == null || dialogOptions.enableDrag == null ? true : dialogOptions.enableDrag,
                        sizeType: dialogOptions == null || dialogOptions.sizeType == null ? 'small' : dialogOptions.sizeType,
                        dialogCls: 'cccis-common-dialog cccis-alert-dialog',
                    }
                }
            );
        },
    }
}]);
'use strict';
/**
 * Options属性：
 *      width：对话框宽度
 *      height：对话框高度
 *      dialogCls：dialog特定样式
 *      hasHead：是否显示Head
 *      headCls：Head特定样式
 *      title：title文字
 *      collapsible：是否可折叠
 *      closable: 是否可关闭
 *      closeText： 关闭tooltip
 *      bodyCls： Body特定样式
 *      enableDrag：是否可拖拽
 *      autoHide：是否自动隐藏，不是销毁
 *      modal：是否模态对话框
 *
 * API：
 *      open
 *      isOpened
 *      setCloseFlag
 *      close
 *      setToTopLayer
 *      setToCenter
 *      $element
 */

angular.module('cccis.angular.common.components.dialog').directive("cccisDialog", ['$compile', '$timeout', function ($compile, $timeout) {
    var template = '' +
        '<div ng-show="options.isVisible" ng-style="{width: options.width, height: options.height}" class="cccis-dialog {{options.dialogCls}}" ng-class="{\'cccis-dialog-with-head\':options.hasHead,\'cccis-dialog-no-head\':!options.hasHead}">' +
        '   <div ng-if="options.hasHead" ng-mousedown="headMouseDown($event)" class="head {{options.headCls}}">' +
        '       <div style="flex:1">{{options.title}}</div>' +
        '       <div ng-if="options.collapsible" ng-click="toggle()" ng-class="{true:\'head-btn glyphicon glyphicon-triangle-top\',false:\'head-btn glyphicon glyphicon-triangle-bottom\'}[options.collapsed]" style="cursor: pointer;"/>' +
        '       <div ng-if="options.closable" title="{{options.closeText}}" ng-click="close()" class="head-btn icon close-icon"/>' +
        '   </div>' +
        '   <div ng-if="!options.hasHead" class="no-head">' +
        '       <span ng-if="options.closable" title="{{options.closeText}}" ng-click="close()" class="head-btn glyphicon glyphicon-remove"/>' +
        '   </div>' +
        '   <div class="body {{options.bodyCls}}" style="" ng-show="!options.collapsed">' +
        '       <div ng-transclude>/' +
        '   </div>' +
        '</div>';

    return {
        restrict: 'EA',
        scope: {
            options: '=',
            api: '='

        },
        replace: true,
        transclude: true,
        link: function ($scope, $element, attrs) {
            $scope.onLoad =function(){
                //Options
                if (!attrs.popupPanelId) {
                    attrs.$set('cccisDialogId', 'cccis_dialog_' + (new Date()).getTime());
                }
                $scope.options.title = $scope.options.title || '';
                $scope.options.isVisible = $scope.options.isVisible!=null?$scope.options.isVisible:true;
                $scope.options.hasHead = $scope.options.hasHead!=null?$scope.options.hasHead:true;
                $scope.options.autoHide = $scope.options.autoHide!=null?$scope.options.autoHide:true;
                $scope.options.collapsible = $scope.options.collapsible!=null?$scope.options.collapsible:false;
                $scope.options.collapsed = $scope.options.collapsed!=null?$scope.options.collapsed:false;
                $scope.options.closable = $scope.options.closable!=null?$scope.options.closable:true;
                //$scope.options.destroyOnClose = $scope.options.destroyOnClose || true;
                $scope.options.closeText = $scope.options.closeText || '关闭';
                $scope.options.enableDrag = $scope.options.enableDrag!=null?$scope.options.enableDrag:true;
                $scope.options.modal = $scope.options.modal!=null?$scope.options.modal:true;
                //Class
                $scope.options.dialogCls = $scope.options.dialogCls || '';
                $scope.options.headCls = $scope.options.headCls || '';
                $scope.options.bodyCls = $scope.options.bodyCls || '';
                $scope.options.bodyStyle = $scope.options.bodyStyle || '';
                $scope.options.sizeType = $scope.options.sizeType || '';

                if($scope.options.sizeType == "large"){
                    $scope.options.width = '1336px';
                    $scope.options.height =  '648px';
                }else if($scope.options.sizeType == "medium"){
                    $scope.options.width = '800px';
                    $scope.options.height =  '500px';
                }else if($scope.options.sizeType == "mediumAndSmall"){
                    $scope.options.width = '410px';
                    $scope.options.height =  '300px';
                }else if($scope.options.sizeType == "small"){
                    $scope.options.width = '400px';
                    $scope.options.height =  '180px';
                }else{
                    $scope.options.width = $scope.options.width || '410px';
                    $scope.options.height = $scope.options.height || '300px';
                }

                $scope.initData();
            };


            $scope.initData = function () {
                // init explore api
                $scope.apiWatcher = $scope.$watch('api', function (newVal, oldVal) {
                    if ($scope.api) {
                        $scope.api.open = $scope.open;
                        $scope.api.isOpened = $scope.isOpened;
                        $scope.api.setCloseFlag = $scope.setCloseFlag;
                        $scope.api.close = $scope.close;
                        $scope.api.setToTopLayer = $scope.setToTopLayer;
                        $scope.api.setToCenter = $scope.setToCenter;
                        $scope.api.element = $element;
                    }
                });

                $scope.collapseWatcher = $scope.$watch('options.collapsed', function (newValue, oldValue) {
                    if ($scope.options.collapsed) {
                        $element.css('height', 'auto');
                    } else {
                        $element.css('height', $scope.options.height);
                    }
                });

                $scope.maskElement = null;
                $scope.diviation = {x: 0, y: 0};
                $scope.mouseMoveHandler = null;
                $scope.mouseUpHandler = null;

                $timeout(function () {
                    $scope.headEle = $('.head', $element);

                    $scope.open();
                    $scope.setToTopLayer();
                    $scope.setToCenter();
                });
            };

            //public method
            $scope.headMouseDown = function ($event) {
                $scope.setToTopLayer();

                if ($scope.options.enableDrag) {
                    $scope.headMouseUp();

                    $scope.dragging = true;


                    //设置捕获范围
                    if ($scope.headEle.setCapture) {
                        $scope.headEle.setCapture();
                    }

                    //使用pageX-offsetLeft计算鼠标和对话框左上角的偏差值
                    $scope.diviation.x = $event.pageX - $element.offset().left;
                    $scope.diviation.y = $event.pageY - $element.offset().top;

                    $scope.mouseMoveHandler = $(window).bind('mousemove', function ($event) {
                        $scope.headMouseMove($event);
                    });

                    $scope.mouseUpHandler = $(window).bind('mouseup', function ($event) {
                        $scope.headMouseUp($event);
                    });
                }
            };

            $scope.headMouseMove = function ($event) {
                if ($scope.options.enableDrag) {
                    if (!$scope.dragging) {
                        return;
                    }
                    //使用fixed的position,所以用clientX而不是pageX
                    $element.css('left', $event.clientX - $scope.diviation.x + 'px');
                    $element.css('top', $event.clientY - $scope.diviation.y + 'px');
                }
            };

            $scope.headMouseUp = function () {
                if ($scope.options.enableDrag) {
                    $scope.dragging = false;

                    if ($scope.mouseMoveHandler != null) {
                        $(window).unbind('mousemove', $scope.mouseMoveHandler);
                        $scope.mouseMoveHandler = null;
                    }
                    if ($scope.mouseUpHandler != null) {
                        $(window).unbind('mouseup', $scope.mouseUpHandler);
                        $scope.mouseUpHandler = null;
                    }

                    //取消捕获范围
                    if ($scope.headEle.releaseCapture) {
                        $scope.headEle.releaseCapture();
                    }
                }
            };

            $scope.toggle = function () {
                if ($scope.options.collapsed) {
                    $scope.expand();
                } else {
                    $scope.collapse();
                }
            };

            $scope.expand = function () {
                $scope.options.collapsed = false;
            };

            $scope.collapse = function () {
                $scope.options.collapsed = true;
            };

            $scope.open = function () {
                $element.css({'left': '0px', 'top': '0px'});
                $scope.options.isVisible = true;

                if ($scope.options.modal == true) {
                    if ($scope.maskElement == null) {
                        var maskElement = '<div class="cccis-dialog-mask"></div>';
                        $scope.maskElement = $(maskElement);
                    }
                    var width = $(document).outerWidth() > $(window).width() ? $(document).outerWidth()-1: '100%';
                    var height = $(document).outerHeight() > $(window).height() ? $(document).outerHeight() : $(window).height();
                    $scope.maskElement.width(width);
                    $scope.maskElement.height(height);

                    $('body').append($scope.maskElement);
                }

                if ($scope.options.autoHide == true) {
                    // register closeFun
                    $timeout(function () {
                        $(document).one("click", $scope.closeFun);
                    }, 500);
                }

                $element.show();
            };
            //define closeFun bind to .dialog
            $scope.closeFun = function (e) {
                var clickInside = $(e.target).closest('.cccis-dialog');
                if (clickInside.length <= 0) {
                    $scope.close();
                } else {
                    $(document).one("click", $scope.closeFun);
                }
            };
            $scope.isOpened = function () {
                return $scope.options.isVisible;
            };

            $scope.setCloseFlag = function (flag) {
                $scope.$parent.canNotClose = flag;
            };

            $scope.close = function () {
                //关闭对话框前检查
                if ($scope.$parent && $scope.$parent.canNotClose) {
                    //for parentWindow
                    $(document).one("click", $scope.closeFun);
                    return;
                }

                if ($scope.$parent && $scope.$parent.beforeDialogClose) {
                    var result = $scope.$parent.beforeDialogClose();
                    if (result != true) {
                        return;
                    }
                }

                $scope.options.isVisible = false;

                if ($scope.options.modal == true && $scope.maskElement != null) {
                    $scope.maskElement.remove();
                    $scope.maskElement = null;
                }
                $element.remove();

                //取消watch
                if ($scope.apiWatcher) {
                    $scope.apiWatcher();
                }

                if ($scope.collapseWatcher) {
                    $scope.collapseWatcher();
                }

                if ($scope.$parent && $scope.$parent.onDialogClose) {
                    $scope.$parent.onDialogClose();
                }
            };

            $scope.setToTopLayer = function () {
                var zIndex = 0;
                var dialogElements = $('.cccis-dialog');
                if (dialogElements.length > 0) {
                    dialogElements.removeClass('active');
                    var maxZIndexElement = _.max(dialogElements, function (divElement) {
                        var zIndex = parseInt(divElement.style.zIndex);
                        return isNaN(zIndex) ? 0 : zIndex;
                    });
                    zIndex = parseInt(maxZIndexElement.style.zIndex);
                    zIndex = (isNaN(zIndex) ? 0 : zIndex);
                }
                $element.addClass('active');

                if (zIndex == 0 || $(maxZIndexElement).attr('cccis-dialog-id') != $element.attr('cccis-dialog-id')) {
                    if(zIndex == 0){
                        zIndex = 19999;
                    }
                    $element.css('z-index', zIndex + 1);

                    if ($scope.options.modal == true) {
                        if ($scope.maskElement != null) {
                            $scope.maskElement.css('z-index', zIndex);
                        }
                    }
                }

            };

            $scope.setToCenter = function (paramScrollTop) {
                // self redefine scrollTop
                var windowWidth = $(window).width();
                var windowHeight = $(window).height();
                var dialogWidth = $element.width();
                var dialogHeight = $element.height();
                var left = (windowWidth - dialogWidth) / 2;
                var top = (windowHeight - dialogHeight) / 2;
                $element.css({'left': left + 'px', 'top': top + 'px'});
            };

            $scope.onLoad();
        },
        template: template
    };
}]);
'use strict';
angular.module('cccis.angular.common.components.dialog').provider("cccisDialogProvider", ['$injector', function ($injector) {
        var defaultOptions = {
            title: '',
            isVisible: true,
            hasHead: true,
            autoHide: false,
            collapsible: false,  //Defines if to show collapsible button.
            collapsed: false, //Defines if the panel is collapsed at initialization.
            closable: true,
            closeText: 'close',
            enableDrag: true,
            modal: true,

            dialogCls: '',  //Add a CSS class to the dialog.
            headCls: '',  //Add a CSS class to the panel header.
            bodyCls: '', //Add a CSS class to the panel body.
            bodyStyle: '',

            height: '300px',
            width: '400px'
        };

        var dialogIdGenerator = 0;

        var nextDialogId = function () {
            dialogIdGenerator++;
            return 'cccis_dialog_' + dialogIdGenerator;
        };

        return {
            $get: function ($templateRequest, $templateCache, $controller, $rootScope, $compile, $document, $q, $timeout) {
                function getTemplatePromise(templateUrl) {
                    var tpl = $templateCache.get(templateUrl);
                    if(tpl){
                        return tpl;
                    }
                    return $templateRequest(templateUrl);
                }

                function getResolvePromises(resolves) {
                    var promisesArr = [];
                    _.each(resolves, function (value) {
                        //因为可能是单独的function，也有可能是需要Angular依赖注入function，所以有function和array两种类型，都需要当成function的方式处理
                        //如果需要传数组，需要将其做成一个obj，然后resolve
                        if (angular.isFunction(value) || angular.isArray(value)) {
                            promisesArr.push($q.when($injector.invoke(value)));
                        }
                        else {
                            promisesArr.push($q.when(value));
                        }
                    });
                    return promisesArr;
                }

                return {
                    //return as promise
                    openDialog: function (params) {
                        var templateUrl = params.templateUrl;
                        var controllerName = params.controllerName;
                        var options = _.assign(angular.copy(defaultOptions), params.options);
                        var resolves = params.resolves;
                        var deferred = $q.defer();
                        var promise = deferred.promise;

                        $q.all([getTemplatePromise(templateUrl)].concat(getResolvePromises(resolves))).then(function (results) {
                            var tplContent = results[0];
                            var template = angular.element('<cccis-dialog api="dialogApi" options="options">' + tplContent + '</cccis-dialog>');

                            var $dialogScope = $rootScope.$new();
                            var ctrlLocals = { $scope: $dialogScope};
                            var idx = 1;
                            angular.forEach(resolves, function (value, key) {
                                ctrlLocals[key] = results[idx++];
                            });

                            $controller(controllerName, ctrlLocals);

                            $dialogScope.dialogId = nextDialogId();
                            $dialogScope.options = options;
                            $dialogScope.dialogApi = {};

                            var content = $compile(template)($dialogScope);
                            content.hide();
                            $('body').append(content);

                            $timeout(function () {
                                if($dialogScope.onDialogResize){
                                    $dialogScope.onDialogResize();
                                }
                                deferred.resolve($dialogScope);
                            });
                        });
                        return promise;
                    },

                };
            }
        };
    }]);
'use strict';
angular.module('cccis.angular.common.components.grid').directive('cellCompiler', [
        '$compile',
        function ($compile) {
            return {
                /*require: '^form',*/
                restrict: 'A',
                link: function (scope, element, attrs) {
                    //scope.cellTemplateScope = scope.$eval(attrs.cellTemplateScope);
                    // Watch for changes to expression.
                    scope.$watch(attrs.cellCompiler, function (new_val) {
                        var new_element = angular.element(new_val);
                        element.append(new_element);
                        $compile(new_element)(scope);
                    });
                }
            };
        }
    ]);
angular.module('cccis.angular.common.components.grid').directive('cccisPaginationBar', function () {

    return {
        restrict: 'E',
        link: function link($scope, el, attrs) {
            $scope.onLoad = function () {
                $scope.$watch('options.totalRecordCount', function () {
                    console.log('totalRecordCount changed');
                    //总记录数变动，需要重新分页
                    $scope.options.currentPage = 1;
                    $scope.options.currentGroup = 1;
                    $scope.pageChange(false);
                }, true);

                $scope.$watch('options.pageItemSize', function () {
                    console.log('pageItemSize changed');
                    //每页显示记录数变动，需要重新分页
                    $scope.options.currentPage = 1;
                    $scope.options.currentGroup = 1;
                    $scope.pageChange(true);
                }, true);
            };
            $scope.options.resetPage = function () {
                $scope.options.currentPage = 1;
                $scope.options.currentGroup = 1;
                $scope.pageChange(false);
            };
            /**
             * 页面切换，计算分组情况
             */
            $scope.pageChange = function (needNotifyPageChanged) {
                $scope.options.totalRecordCount = $scope.options.totalRecordCount || 0;

                //最大页数
                $scope.maxPageNum = parseInt(($scope.options.totalRecordCount - 1) / $scope.options.pageItemSize + 1);
                //最大组数
                $scope.maxGroupNum = parseInt(($scope.maxPageNum - 1) / $scope.options.groupItemSize + 1);
                //当前组
                $scope.options.currentGroup = parseInt(($scope.options.currentPage - 1) / $scope.options.groupItemSize + 1);
                //当前组所在的第一页
                $scope.firstPageInCurrentGroup = ($scope.options.currentGroup - 1) * $scope.options.groupItemSize + 1;
                //当前组所在的最后一页
                $scope.lastPageInCurrentGroup = ($scope.options.currentGroup) * $scope.options.groupItemSize;
                $scope.lastPageInCurrentGroup = $scope.lastPageInCurrentGroup > $scope.maxPageNum ? $scope.maxPageNum : $scope.lastPageInCurrentGroup;

                $scope.pageArray = [];
                for (var page = $scope.firstPageInCurrentGroup; page <= $scope.lastPageInCurrentGroup; page++) {
                    $scope.pageArray.push(page);
                }

                if (needNotifyPageChanged && $scope.onPaginationChange) {
                    $scope.onPaginationChange($scope.options.currentPage, $scope.options.pageItemSize);
                }
                $scope.allRowCheckedFlag = false;
            };

            /***
             *  页面调整动作触发
             */
            $scope.gotoPage = function (page) {
                if (page <= 0) {
                    page = 1;
                }
                if (page > $scope.maxPageNum) {
                    page = $scope.maxPageNum;
                }
                $scope.options.currentPage = page;

                $scope.pageChange(true);
            };

            $scope.onLoad();
        },
        templateUrl: 'common/components/grid/pagination-bar.tpl.html'
    };
})
/**
 *
 * FixedHeight：基于父容器，自动计算grid content高度
 *
 * Options属性：
 *      gridHighlightCellStyleFlag：是否显示行高选样式
 *      rowSelectable：行是否可选
 *      rowCheckable：行是否可以check
 *      multiRowCheckable：是否支持多行的check
 *      paginationSupport：是否使用分页
 *      useExternalPagination：是否使用外部分页
 *      fixedHeightFlag：是否固定高度
 *
 *      noDataMessage
 *
 *      currentPage: 当前页
 *      currentGroup：当前页所属分组
 *      pageItemSize：每页显示数据数量
 *      groupItemSize：每组显示的页数;
 * Grid Col属性：
 *      field：字段
 *      displayName：显示列头名称
 *      sort：排序状态 - null，'asc'，'desc'
 *      enableSorting：是否支持排序
 *      hidden：是否隐藏该列
 *
 *      headTemplate：head模板
 *      headTemplateScope：head模板scope
 *      headStyle：head样式（ng-style）
 *
 *      cellTemplate：cell模板
 *      cellTemplateScope：cell模板scope
 *      cellClass：cell style（class）
 *      cellStyle：cell样式（ng-style）
 *
 * Grid Row属性：
 *      $checked
 *      $selected
 *      $checkable：是否可以check，由外部传入
 *
 * API：
 *      getCheckedRows
 *      checkAllRows
 *      setGridData
 */

angular.module('cccis.angular.common.components.grid').directive('cccisPaginationGrid', ['$timeout', '$window', function ($timeout, $window) {
    var TEMPLATE_FIXED_HEIGHT = 'common/components/grid/fixed-height-pagination-grid.tpl.html';
    var TEMPLATE_AUTO_HEIGHT = 'common/components/grid/auto-height-pagination-grid.tpl.html';

    return {
        restrict: 'E',
        replace: true,
        scope: {
            options: '=',
            onRowSelected: '=',
            onRowChecked: '=',
            onAllRowChecked: '=',
            onRowDbClicked: '=',
            onPaginationChange: '=',
            onSortChanged: '=',
            api: '='
        },
        link: function ($scope, $element, $attrs) {
            $scope.onLoad = function () {
                $scope.options.gridHighlightCellStyleFlag = $scope.options.gridHighlightCellStyleFlag || true;
                $scope.options.rowSelectable = $scope.options.rowSelectable || false;
                $scope.options.rowCheckable = $scope.options.rowCheckable || false;
                $scope.options.multiRowCheckable = $scope.options.multiRowCheckable || false;
                $scope.options.useExternalPagination = $scope.options.useExternalPagination || false;
                $scope.options.noDataMessage = $scope.options.noDataMessage || '没有找到匹配的结果。';
                $scope.options.pageItemSize = $scope.options.pageItemSize || 10;
                $scope.appScope = $scope.$parent;

                $scope.options.currentPage = 1;
                $scope.options.currentGroup = 0;
                $scope.options.pageItemSize = 10;
                $scope.options.groupItemSize = 5;



                // init explore api
                $scope.$watch('api', function (newVal, oldVal) {
                    if ($scope.api) {
                        $scope.api.reload = $scope.reload;
                        $scope.api.getCheckedRows = $scope.getCheckedRows;
                        $scope.api.checkAllRows = $scope.checkAllRows;
                        $scope.api.setGridData = $scope.setGridData;
                        $scope.api.resetPage = $scope.resetPage;
                    }
                });

                $scope.$watch('options.columnDefs', function (newVal, oldVal) {
                    $scope.initColumns();
                });
            };

            /**
             * 重新加载组件
             */
            $scope.reload = function(){
                $scope.onLoad();
            };

            /**
             * 重新初始化分页
             */
            $scope.resetPage = function () {
                $scope.options.resetPage();
            };

            /**
             * 初始化列
             **/
            $scope.initColumns = function () {
                $scope.columns = _.filter($scope.options.columnDefs, function (col) {
                    if (col.hidden == true) {
                        return false;
                    } else {
                        return true;
                    }
                });

                $scope.columnCount = $scope.columns.length;

                if($scope.options.gridHighlightCellStyleFlag){
                    $scope.columnCount++;
                }
                if($scope.options.rowCheckable){
                    $scope.columnCount++;
                }
            };

            $scope.setGridData = function (gridData, totalRecordCount) {
                $scope.gridData = gridData;
                if (!$scope.options.useExternalPagination) {
                    $scope.gridDataBak = angular.copy($scope.gridData); //内建排序时使用
                }
                $scope.options.totalRecordCount = totalRecordCount;
            };

            $scope.sortData = function (col, columns) {
                if (!col.enableSorting) {
                    return;
                }
                var sortedData = {};

                //清除之前的排序列
                _.forEach(columns, function (otherCol) {
                    if (col.field != otherCol.field) {
                        otherCol.sort = null;
                    }
                });

                if (col.sort == null) {
                    col.sort = 'desc';
                } else if (col.sort == 'desc') {
                    col.sort = 'asc';
                } else if (col.sort == 'asc') {
                    col.sort = null;
                }

                if ($scope.options.useExternalPagination) {
                    if ($scope.onSortChanged) {
                        var sortField = col.sort == null ? null : col.field;
                        $scope.onSortChanged($scope.options.currentPage, $scope.options.pageItemSize, sortField, col.sort);
                    }
                } else {
                    if (col.sort == null) {
                        sortedData = $scope.gridDataBak;
                    } else if (col.sort == 'asc') {
                        sortedData = _.sortBy($scope.gridData, col.field);
                    } else if (col.sort == 'desc') {
                        sortedData = _.sortBy($scope.gridData, col.field).reverse();
                    }
                    angular.copy(sortedData, $scope.gridData);
                }
            };

            /*** checkbox 相关逻辑 ***/
            $scope.checkAllRows = function (manualFlag, silentFlag) {
                if ($scope.options.rowCheckable && $scope.options.multiRowCheckable) {
                    if (manualFlag != null) {
                        $scope.allRowCheckedFlag = manualFlag;
                    } else {
                        $scope.allRowCheckedFlag = !!!$scope.allRowCheckedFlag;
                    }

                    if($scope.onAllRowChecked && silentFlag!=true){
                        $scope.onAllRowChecked($scope.allRowCheckedFlag);
                    }

                    _.forEach($scope.gridData, function (row) {
                        if (row.$checkable == false) {
                            return;
                        }
                        row.$checked = $scope.allRowCheckedFlag;
                        // if ($scope.onRowChecked && silentFlag!=true) {
                        //     $scope.onRowChecked(row, row.$checked);
                        // }
                    });
                }
            };

            $scope.checkRow = function (row) {
                if ($scope.options.rowCheckable && row.$checkable != false) {
                    if ($scope.options.multiRowCheckable == false) {
                        _.forEach($scope.gridData, function (rowItem) {
                            if (rowItem != row) {
                                rowItem.$selected = false;
                                if ($scope.onRowSelected) {
                                    $scope.onRowSelected(rowItem, false);
                                }
                            }
                        });
                    }
                    row.$checked = !!row.$checked;
                    if ($scope.onRowChecked) {
                        $scope.onRowChecked(row, row.$checked);
                    }

                    $scope.updateRowCheckedFlag();
                }
            };

            $scope.updateRowCheckedFlag = function () {
                //checkbox的全选和全不选的问题
                if ($scope.gridData == null || $scope.gridData.length == 0) {
                    $scope.allRowCheckedFlag = false;
                    return;
                }
                var uncheckedRow = _.find($scope.gridData, function (row) {
                    return !row.$checked && row.$checkable != false;
                });
                $scope.allRowCheckedFlag = (uncheckedRow == null);
            };

            $scope.getCheckedRows = function () {
                if ($scope.options.rowCheckable) {
                    var checkedRows = [];
                    _.forEach($scope.gridData, function (row) {
                        if (row.$checked) {
                            checkedRows.push(row);
                        }
                    });
                    return checkedRows;
                } else {
                    return [];
                }
            };


            /*** select 相关逻辑 ***/
            $scope.selectRow = function (row) {
                if ($scope.options.rowSelectable) {
                    _.forEach($scope.gridData, function (rowItem) {
                        if (rowItem != row) {
                            rowItem.$selected = false;
                            if ($scope.onRowSelected) {
                                $scope.onRowSelected(rowItem, false);
                            }
                        }
                    });
                    row.$selected = true;
                    if ($scope.onRowSelected) {
                        $scope.onRowSelected(row, true);
                    }
                }
            };

            $scope.unSelectedAllRows = function () {
                if ($scope.options.rowSelectable) {
                    _.forEach($scope.gridData, function (row) {
                        row.$selected = false;
                        if ($scope.onRowSelected) {
                            $scope.onRowSelected(row, false);
                        }
                    });
                }
            };


            /*** 模板选择相关逻辑 ***/
            $scope.getTemplate = function () {
                return $scope.options.fixedHeightFlag ? TEMPLATE_FIXED_HEIGHT : TEMPLATE_AUTO_HEIGHT;
            };

            $scope.onLoad();
        },
        template: "<div ng-include='getTemplate()'></div>"
    }
}])
/**
 * FixedHeight：基于父容器，自动计算grid content高度
 *
 * Options属性：
 *      noDataMessage：无数据显示的message
 *      useExternalPagination：是否使用外部分页
 *      columnDefs：列定义
 *      gridData：数据

 * Grid Col属性：
 *      field：字段
 *      displayName：显示列头名称
 *      sort：排序状态 - null，'asc'，'desc'
 *      enableSorting：是否支持排序
 *
 *      headStyle：head样式（ng-style）
 *
 *      cellTemplate：cell模板
 *      cellTemplateScope：cell模板scope
 *      cellClass：cell style（class）
 *      cellStyle：cell样式（ng-style）
 *
 * Grid Row属性：
 *
 * API：
 *      setGridData
 */

angular.module('cccis.angular.common.components.grid').directive('cccisSimpleFixedHeightGrid', ['$timeout', '$window', function ($timeout, $window) {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            options: '=',
            api: '='
        },
        link: function ($scope, $element, $attrs) {
            $scope.onLoad = function () {
                $scope.options.noDataMessage = $scope.options.noDataMessage || '没有找到匹配的结果。';
                $scope.options.useExternalPagination = $scope.options.useExternalPagination || false;
                $scope.appScope = $scope.$parent;
                // init explore api
                $scope.$watch('api', function (newVal, oldVal) {
                    if ($scope.api) {
                        $scope.api.setGridData = $scope.setGridData;
                    }
                });
                $scope.initColumns();

                if($scope.options.gridData){
                    $scope.setGridData($scope.options.gridData);
                }
            };

            /**
             * 初始化列
             **/
            $scope.initColumns = function () {
                $scope.columns = $scope.options.columnDefs;
                $scope.columnCount = $scope.columns.length;
            };

            $scope.sortData = function (col, columns) {
                if (!col.enableSorting) {
                    return;
                }
                var sortedData = {};

                //清除之前的排序列
                _.forEach(columns, function (otherCol) {
                    if (col.field != otherCol.field) {
                        otherCol.sort = null;
                    }
                });

                if (col.sort == null) {
                    col.sort = 'desc';
                } else if (col.sort == 'desc') {
                    col.sort = 'asc';
                } else if (col.sort == 'asc') {
                    col.sort = null;
                }

                if ($scope.options.useExternalPagination) {
                    if ($scope.onSortChanged) {
                        var sortField = col.sort == null ? null : col.field;
                        $scope.onSortChanged($scope.options.currentPage, $scope.options.pageItemSize, sortField, col.sort);
                    }
                } else {
                    if (col.sort == null) {
                        sortedData = $scope.gridDataBak;
                    } else if (col.sort == 'asc') {
                        sortedData = _.sortBy($scope.gridData, col.field);
                    } else if (col.sort == 'desc') {
                        sortedData = _.sortBy($scope.gridData, col.field).reverse();
                    }
                    angular.copy(sortedData, $scope.gridData);
                }
            };


            $scope.setGridData = function (gridData) {
                $scope.gridData = gridData;
                if (!$scope.options.useExternalPagination) {
                    $scope.gridDataBak = angular.copy($scope.gridData); //内建排序时使用
                }
            };

            $scope.onLoad();
        },
        template: ''+
        '<div class="cccis-pagination-grid cccis-fixed-height-pagination-grid cccis-simple-fixed-height-grid">'+
        '   <div class="head-container">'+
        '       <table class="table table-bordered cccis-table">'+
        '       <thead>'+
        '           <tr>'+
        '               <th ng-repeat="col in columns" ng-class="{\'cursor-pointer\':col.enableSorting==true}" ng-style="col.headStyle" ng-click="sortData(col, columns)">'+
        '                   <div title="{{::col.displayName}}">{{::col.displayName}}</div>'+
        '                   <div ng-if="col.sort == \'desc\'"><i class="glyphicon glyphicon-triangle-bottom"></i></div>'+
        '                   <div ng-if="col.sort == \'asc\'"><i class="glyphicon glyphicon-triangle-top"></i></div>'+
        '               </th>'+
        '           </tr>'+
        '       </thead>'+
        '       </table>'+
        '   </div>'+
        '   <div class="content-container">'+
        '       <table class="table table-bordered cccis-table">'+
        '       <thead>'+
        '           <tr>'+
        '               <th ng-repeat="col in columns" ng-style="col.headStyle" >'+
        '                   <div>{{::col.displayName}}</div>'+
        '               </th>'+
        '           </tr>'+
        '       </thead>'+
        '       <tbody class="no-data-found" ng-if="gridData == null || gridData.length==0">'+
        '           <tr>'+
        '               <td colspan="{{::columnCount}}">'+
        '                   <div style="height:50px;">{{::options.noDataMessage}}</div>'+
        '               </td>'+
        '           </tr>'+
        '       </tbody>'+
        '       <tbody class="data-found" ng-if="gridData.length>0">'+
        '           <tr ng-repeat="row in gridData">'+
        '               <td ng-repeat="col in columns" class="{{::col.cellClass}}" ng-style="col.cellStyle">'+
        '                   <div ng-if="col.cellTemplate" cell-compiler="col.cellTemplate"></div>'+
        '                   <div ng-if="!col.cellTemplate" title="{{row[col.field]}}">{{row[col.field]}}</div>'+
        '               </td>'+
        '           </tr>'+
        '       </tbody>'+
        '       </table>'+
        '   </div>'+
        '</div>'
    }
}])
'use strict';
angular.module('cccis.angular.common.components.inputField')
    .directive("cccisCheckboxField", ['$timeout', function ($timeout) {
       return {
            restrict: 'E',
            replace: true,
            scope: {
                caption: '@',
                ngDisabled: '=',
                ngModel: '=',
                checkboxFieldClass: '@',

                onChecked: '&'
            },
            template: ''+
            '<div class="cccis-checkbox-field {{checkboxFieldClass}}" ng-click="toggle()" title="{{caption}}">' +
            '   <div ng-class="{' +
            '       \'field icon checkbox-normal-unchecked-icon\' : (ngModel!=true && ngDisabled!=true), ' +
            '       \'field icon checkbox-normal-checked-icon\': (ngModel==true && ngDisabled!=true),' +
            '       \'field cursor-not-allowed icon checkbox-disabled-checked-icon\': (ngModel==true && ngDisabled==true),' +
            '       \'field cursor-not-allowed icon checkbox-disabled-unchecked-icon\': (ngModel!=true && ngDisabled==true) ' +
            '       }"></div>' +
            '   <div ng-if="caption" class="caption">{{caption}}</div>' +
            '</div>',
            link: function ($scope, $elem, attrs) {
                if($scope.ngModel == 'true'){
                    $scope.ngModel=true;
                }
                //Options
                $scope.caption = $scope.caption || '';
                if($scope.caption){
                    $scope.paddingLeft = 'padding-left:41px;';
                }

                //public method
                $scope.toggle = function () {
                    if($scope.ngDisabled == true){
                        return;
                    }
                    $scope.ngModel = !$scope.ngModel;

                    if($scope.onChecked){
                        $timeout($scope.onChecked);
                    }
                };
            },
        };
    }]);
'use strict';
/**
 * resultMode: '1' : 返回的结果只包含选中的值的数组[1,2,3,5]
 * resultMode: '2' : 返回的结果包含选中，未选的数组[true,true,true,false,true]
 *
 */
angular.module('cccis.angular.common.components.inputField')
    .directive("cccisCheckboxGroupField", ['$timeout', function ($timeout) {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                ngModel: '=',
                optionList: '=',
                optionText: '@',
                optionValue: '@',
                resultMode: '@',
                onItemChanged: '='
            },
            template: '' +
            '<div class="cccis-checkbox-group-field {{checkboxGroupFieldClass}}">' +
            '   <cccis-checkbox-field ng-repeat="option in optionList" ng-model="option.$status" caption="{{option[optionText]}}" ' +
            '           on-checked="onCheckboxOptionChecked(option)">' +
            '   </cccis-checkbox-field>' +
            '</div>',
            link: function ($scope, $elem, attrs) {

                //Options
                $scope.resultMode = $scope.resultMode || '1';

                $scope.isCheckboxSelected = function (option) {
                    return _.includes($scope.ngModel, option[$scope.optionValue]);
                };

                $scope.onCheckboxOptionChecked = function (option) {
                    if ($scope.ngModel) {
                        $scope.ngModel.splice(0, $scope.ngModel.length);
                    } else {
                        $scope.ngModel = [];
                    }

                    _.each($scope.optionList, function (option) {
                        if ($scope.resultMode == '1') {
                            if (option.$status) {
                                $scope.ngModel.push(option[$scope.optionValue]);
                            }
                        }
                        if ($scope.resultMode == '2') {
                            $scope.ngModel.push(option.$status);
                        }
                    });

                    if ($scope.onItemChanged) {
                        $timeout(function () {
                            $scope.onItemChanged(option);
                        });
                    }

                    //触发onChange事件
                    var event = document.createEvent('HTMLEvents');
                    event.initEvent("change", true, true);
                    event.eventType = 'message';
                    if ($elem[0].dispatchEvent) {
                        return $elem[0].dispatchEvent(event);
                    } else if ($elem[0].fireEvent) {
                        return $elem[0].fireEvent("onchange", event);
                    }
                };
            }
        };
    }]);
'use strict';
angular.module('cccis.angular.common.components.inputField').directive('cccisDropDownBasicField', ['$timeout', '$q', function ($timeout, $q) {
    return {
        require: 'ngModel',
        restrict: 'E',
        replace: true,
        scope: {
            ngId: '@', //input id值
            ngModel: '=',
            placeholder: '@',
            allowClear: '@',
            ngDisabled: '@',    //是否disable
            dropDownBasicFieldClass: '@',

            optionList: "=",    //option列表
            optionText: '@',    //option的对象显示的TEXT文本属性
            optionValue: '@',   //option的对象对应的VALUE属性

            beforeOptionSelected: '=',//选中option之前触发
            afterOptionSelected: '=',//选中option之后触发
        },
        template: '' +
        '<div class="cccis-drop-down-field drop-down-basic-field input-group {{dropDownBasicFieldClass}}" ng-class="{\'disabled\': ngDisabled}">' +
        '   <select class="form-control select2"></select>' +
        '</div>',
        link: function ($scope, $element, $attrs, ngModelCtrl) {
            $scope.onLoad = function () {
                $scope.select2Elem = $("select", $element);
                $scope.select2Options = {
                    data: {
                        results: [],
                        id: $scope.optionValue,
                        text: $scope.optionText,
                    },
                    allowClear: $scope.allowClear == 'true',
                    minimumResultsForSearch: Infinity,
                    multiple:false,
                    placeholder: $scope.placeholder || '请选择',
                    width: 'resolve',
                    language: {
                       inputTooShort: function () {
                            return "You must enter more characters...";
                        }
                    }
                };
                $scope.select2Elem.on('select2:select', function (e) {
                    $timeout(function(){
                        var selectedValue = $scope.select2Elem.val();
                        $scope.onOptionSelected(selectedValue);
                    })
                });
                /**
                 * 焦点选中Input元素时，将焦点设置到外部DIV边框上
                 */
                $scope.select2Elem.on('select2:opening', function (e) {
                    $timeout(function(){
                        $('.drop-down-field', $element).addClass('focus');
                        $('.form-control', $element).select();
                    })
                });
                /**
                 * 焦点移出Input元素时，去除外部DIV边框的焦点效果
                 */
                $scope.select2Elem.on('select2:closing', function (e) {
                    $timeout(function(){
                        $('.drop-down-field', $element).removeClass('focus');
                    })
                });

                $scope.$watch('ngModel', function () {
                    $scope.selectOption($scope.ngModel);
                });

                $scope.$watch('optionText', function () {
                    $scope.updateWidgetOptions('data.text', $scope.optionText);
                });

                $scope.$watch('optionValue', function () {
                    $scope.updateWidgetOptions('data.value', $scope.optionValue);
                });

                //下拉列表选项发生变动
                $scope.$watch('optionList', function () {
                    $scope.updateWidgetOptions('data.result', $scope.optionList);
                    $scope.selectOption($scope.ngModel);
                });

                $scope.select2Elem.select2({
                    // theme: "bootstrap",
                    placeholder: $scope.placeholder,
                    allowClear: $scope.allowClear == 'true'
                })
            };

            $scope.mapToSelect2OptionItem = function (ngModelOptionItem) {
                if (!ngModelOptionItem || !$scope.select2Options.data) {
                    return null;
                }
                return _.find($scope.select2Options.data, function (select2OptionItem) {
                    return select2OptionItem.id == ngModelOptionItem[$scope.optionValue];
                });
            };

            $scope.mapToNgModelOptionItem = function(select2OptionItem){
                if (!select2OptionItem || !$scope.optionList) {
                    return null;
                }
                return _.find($scope.optionList, function (ngModelOptionItem) {
                    return select2OptionItem.id == ngModelOptionItem[$scope.optionValue];
                });
            };

            $scope.updateWidgetOptions = function (optionName, value) {
                _.set($scope.select2Options, optionName, value);
                $scope.select2Elem.select2($scope.select2Options);
            };

            /**
             * 用户操作，选中某个选项
             */
            $scope.onOptionSelected = function (selectedValue) {
                var beforeOptionSelectedFunc = $scope.beforeOptionSelected || function () {
                    return true;
                };
                var afterOptionSelectedFunc = $scope.afterOptionSelected || function () {
                    return true;
                };

                $q.when(beforeOptionSelectedFunc(selectedValue)).then(function (confirmed) {
                    if (confirmed == true) {
                        //应用当前的值
                        $scope.ngModel = selectedValue;
                        $q.when(afterOptionSelectedFunc(selectedValue)).then(function () {
                        });
                    } else {
                        //回退之前的值
                        $scope.selectOption($scope.ngModel);
                    }
                });
            };

            /**
             * 模型操作，选中某个选项
             */
            $scope.selectOption = function (selectedValue) {
                if(selectedValue==null){
                    $scope.select2Elem.val(null).trigger("change");
                }else{
                    $scope.select2Elem.val(selectedValue).trigger("change");
                }
            };

            $scope.onLoad();
        }

    }
}]);
'use strict';
angular.module('cccis.angular.common.components.inputField')
    .directive('dropDownExtQueryField', ['$timeout', '$q', function ($timeout, $q) {
        return {
            require: 'ngModel',
            restrict: 'E',
            replace: true,
            scope: {
                ngId: '@', //input id值
                ngModel: '=',
                placeholder: '@',
                allowClear: '@',
                ngDisabled: '@',    //是否disable
                dropDownExtQueryFieldClass: '@',

                minimumInputLength: '@', //输入字数后开始查询
                ajaxUrl: '@',

                optionText: '@',    //option的对象显示的TEXT文本属性
                optionValue: '@',   //option的对象对应的VALUE属性

                beforeOptionSelected: '=',//选中option之前触发
                onAfterOptionSelected: '=',//选中option之后触发
            },
            template: '' +
            '<div class="cccis-drop-down-field cccis-drop-down-ext-query-field input-group {{dropDownExtQueryFieldClass}}" ng-class="{\'disabled\': ngDisabled}">' +
            '   <select class="form-control select2"></select>' +
            '</div>',
            link: function ($scope, $element, $attrs, ngModelCtrl) {
                $scope.onLoad = function () {
                    $scope.select2Elem = $("select", $element);
                    $scope.select2Options = {
                        data: {
                            results: [],
                            id: $scope.optionValue,
                            text: $scope.optionText,
                        },
                        allowClear: $scope.allowClear == 'true',
                        minimumInputLength: $scope.minimumInputLength,
                        minimumResultsForSearch: $scope.searchEnabled != 'true' ? Infinity : 10,
                        multiple: false,
                        placeholder: $scope.placeholder || '请选择',
                        width: 'resolve',
                        language: {
                            inputTooShort: function () {
                                return "You must enter more characters...";
                            }
                        },
                        ajax: {
                            url: function (params) {
                                return $scope.ajaxUrl;
                            },
                            dataType: 'json',
                            data: function (params) {
                                return {
                                    keyword: params.term,
                                };
                            },
                            cache: false
                        }
                    };
                    $scope.select2Elem.on('select2:select', function (e) {
                        $timeout(function () {
                            var selectedValue = $scope.select2Elem.val();
                            $scope.onOptionSelected(selectedValue);
                        })
                    });
                    /**
                     * 焦点选中Input元素时，将焦点设置到外部DIV边框上
                     */
                    $scope.select2Elem.on('select2:opening', function (e) {
                        $timeout(function () {
                            $('.drop-down-field', $element).addClass('focus');
                            $('.form-control', $element).select();
                        })
                    });
                    /**
                     * 焦点移出Input元素时，去除外部DIV边框的焦点效果
                     */
                    $scope.select2Elem.on('select2:closing', function (e) {
                        $timeout(function () {
                            $('.drop-down-field', $element).removeClass('focus');
                        })
                    });

                    $scope.$watch('ngModel', function () {
                        $scope.selectOption($scope.ngModel);
                    });

                    $scope.$watch('optionText', function () {
                        $scope.updateWidgetOptions('data.text', $scope.optionText);
                    });

                    $scope.$watch('optionValue', function () {
                        $scope.updateWidgetOptions('data.value', $scope.optionValue);
                    });

                    $scope.select2Elem.select2({
                        // theme: "bootstrap",
                        placeholder: $scope.placeholder,
                        allowClear: $scope.allowClear == 'true'
                    })
                };

                $scope.mapToSelect2OptionItem = function (ngModelOptionItem) {
                    if (!ngModelOptionItem || !$scope.select2Options.data) {
                        return null;
                    }
                    return _.find($scope.select2Options.data, function (select2OptionItem) {
                        return select2OptionItem.id == ngModelOptionItem[$scope.optionValue];
                    });
                };

                $scope.updateWidgetOptions = function (optionName, value) {
                    _.set($scope.select2Options, optionName, value);
                    $scope.select2Elem.select2($scope.select2Options);
                };

                /**
                 * 用户操作，选中某个选项
                 */
                $scope.onOptionSelected = function (selectedValue) {
                    var beforeOptionSelectedFunc = $scope.beforeOptionSelected || function () {
                        return true;
                    };
                    var onAfterOptionSelectedFunc = $scope.onAfterOptionSelected || function () {
                        return true;
                    };

                    $q.when(beforeOptionSelectedFunc(selectedValue)).then(function (confirmed) {
                        if (confirmed == true) {
                            //应用当前的值
                            $scope.ngModel = selectedValue;
                            $q.when(onAfterOptionSelectedFunc(selectedValue)).then(function () {
                            });
                        } else {
                            //回退之前的值
                            $scope.selectOption($scope.ngModel);
                        }
                    });
                };

                /**
                 * 模型操作，选中某个选项
                 */
                $scope.selectOption = function (selectedValue) {
                    if (selectedValue == null) {
                        $scope.select2Elem.val(null).trigger("change");
                    } else {
                        $scope.select2Elem.val(selectedValue).trigger("change");
                    }
                };

                $scope.onLoad();
            }
        }
    }]);
'use strict';
angular.module('cccis.angular.common.components.inputField').directive('cccisLabelField', [function () {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        scope: {
            caption: '@',
            requiredMark: '@',
            ngId: '@',//input id值

            labelFieldClass: '@'
        },
        template: '' +
        '<div class="cccis-label-field {{labelFieldClass}}">' +
        '   <div title="{{caption}}" class="caption" ng-class="{\'require-mark\':requiredMark==\'true\'}">{{caption}}</div>' +
        '   <div class="field" ng-transclude></div>' +
        '</div>',
        link: function ($scope, $element, $attrs, $ngModelCtrl) {
            $scope.onLoad = function () {
            };

            $scope.onLoad();
        }
    }
}])
;
'use strict';
angular.module('cccis.angular.common.components.inputField')
    .directive('cccisLayDateRangeField', ['$timeout', '$q', function ($timeout, $q) {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                ngId: '@',
                dateType: '@',
                dateRangeStart: '=',
                dateRangeEnd: '=',
                min: '@',
                max: '@',
                placeholder: '@',
                ngDisabled: '=',
                datetimeRangeFieldClass: '@',
                notAfterToday: '@',

                onDataChanged: '=',
            },
            template: '' +
            '<div class="text-field datetime-field datetime-range-field {{datetimeRangeFieldClass}}">' +
            '   <text-field ng-model="dateRangeModel" type="text" placeholder="{{placeholder}}"/>' +
            '</div>',

            link: function ($scope, $element, $attrs) {
                $scope.onLoad = function () {
                    if (!_.includes(['datetime', 'date'], $scope.dateType)) {
                        $scope.dateType = 'datetime';
                        $scope.min = $scope.min || '1900-1-1 00:00:00';
                        $scope.max = $scope.max || '2099-12-31 00:00:00';
                    } else {
                        $scope.min = $scope.min || '1900-1-1';
                        $scope.max = $scope.max || '2099-12-31';
                    }

                    $scope.dateRangeModel = null;

                    $scope.$watch('dateRangeStart', function () {
                        $scope.dateRangeModel = $scope.dateRangeStart + ' - ' + $scope.dateRangeEnd;
                    });


                    $scope.$watch('dateRangeEnd', function () {
                        $scope.dateRangeModel = $scope.dateRangeStart + ' - ' + $scope.dateRangeEnd;
                    });

                    $scope.$watch('dateRangeModel', function () {
                        var splitItems = null;
                        if ($scope.dateRangeModel) {
                            splitItems = $scope.dateRangeModel.split(' - ');
                        }
                        if (splitItems && splitItems.length == 2) {
                            $scope.dateRangeStart = splitItems[0];
                            $scope.dateRangeEnd = splitItems[1];
                        } else {
                            $scope.dateRangeStart = null;
                            $scope.dateRangeEnd = null;
                        }
                    });

                    laydate.render({
                        elem: $("input", $element)[0],
                        type: $scope.dateType,
                        range: true,
                        min: $scope.min,
                        max: $scope.max,
                        ready: function (dateRangeStart, dateRangeEnd) {
                            //控件初始打开的回调
                            $scope.$apply(function () {
                                console.log("ready");
                            });
                        },
                        render: function (options) {
                            //弹出控件提示
                            $scope.$apply(function () {
                                console.log("render");
                            });
                        },
                        change: function (value, dateRangeStart, dateRangeEnd) {
                            //日期时间被切换后的回调
                            $scope.$apply(function () {
                                console.log("change");
                                // $scope.dateRangeStart = dateRangeStart;
                                // $scope.dateRangeEnd = dateRangeEnd;
                            });

                        },
                        done: function (value, dateRangeStart, dateRangeEnd) {
                            //点击日期、清空、现在、确定均会触发
                            $scope.$apply(function () {
                                console.log("value:" + value);
                                var splitItems = null;
                                if (value) {
                                    splitItems = value.split(' - ');
                                }
                                if (splitItems && splitItems.length == 2) {
                                    $scope.dateRangeStart = splitItems[0];
                                    $scope.dateRangeEnd = splitItems[1];
                                    // $scope.dateRangeStart = moment(splitItems[0], "YYYY-MM-DD").toDate();
                                    // $scope.dateRangeEnd = moment(splitItems[1], "YYYY-MM-DD").toDate();
                                } else {
                                    $scope.dateRangeStart = null;
                                    $scope.dateRangeEnd = null;
                                }
                            });
                        }
                    });
                };

                /**
                 * 焦点选中Input元素时，将焦点设置到外部DIV边框上
                 */
                $scope.onInputFocus = function ($event) {
                    $($event.target).closest('.field').addClass('focus');
                    $($event.target).select();
                };

                /**
                 * 焦点移出Input元素时，去除外部DIV边框的焦点效果
                 */
                $scope.onInputBlur = function ($event) {
                    $($event.target).closest('.field').removeClass('focus');
                };


                $scope.onLoad();
            }
        }
    }])
;
'use strict';
angular.module('cccis.angular.common.components.inputField')
    .directive("cccisRadioField", ['$timeout', function ($timeout) {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                group: '@',
                ngModel: '=',
                ngValue: '=',
                ngClick: '=',
                caption: '@',
                disabled: '@',
                uncheckable: '@', //是否支持反选
                radioFieldClass: '@'
            },
            template: '' +
            '<div class="cccis-radio-field {{radioFieldClass}}">' +
            '<div ng-click="onRadioClick()"  >' +
            '   <input type="radio" name="{{group}}" ng-model="ngModel" ng-value="ngValue"/>' +
            '   <div ng-class="{' +
            '       \'field icon radio-normal-unchecked-icon\' : (ngModel!=ngValue && disabled!=\'true\'), ' +
            '       \'field icon radio-normal-checked-icon\': (ngModel==ngValue && disabled!=\'true\'),' +
            '       \'field icon radio-disabled-checked-icon\': (ngModel!=ngValue && disabled==\'true\'),' +
            '       \'field icon radio-disabled-unchecked-icon\': (ngModel==ngValue && disabled==\'true\') ' +
            '       }"></div>' +
            '   <div class="caption">{{caption}}</div>' +
            '</div>',
            link: function ($scope, $elem, attrs) {
                //Options
                $scope.caption = $scope.caption || '';

                //public method
                $scope.onRadioClick = function () {
                    if($scope.uncheckable == 'true'){
                        if($scope.ngModel == $scope.ngValue){
                            $scope.ngModel = null;
                        }else{
                            $scope.ngModel = $scope.ngValue;
                        }
                    }else{
                        $scope.ngModel = $scope.ngValue;
                    }

                    if($scope.ngClick){
                        $scope.ngClick();
                    }
                };
            }
        };
    }]);
'use strict';
angular.module('cccis.angular.common.components.inputField')
    .directive("radioGroupField", ['$timeout', function ($timeout) {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                group: '@',
                ngModel: '=',
                optionList: '=',
                optionText: '@',    //option的对象显示的TEXT文本属性
                optionValue: '@',   //option的对象对应的VALUE属性
                onItemChanged: '=',
                disabled: '@',
                uncheckable: '@', //是否支持反选
                radioGroupFieldClass: '@'
            },
            template: '' +
            '<div class="cccis-radio-group-field {{radioGroupFieldClass}}">' +
            '   <div ng-repeat="option in optionList" ng-click="onRadioClick(option)" class="option" title="{{option[optionText]}}">' +
            '       <input type="radio" name="{{group}}" ng-model="$parent.ngModel" ng-value="option[optionValue]"/>' +
            '       <div class="icon" ng-class="{' +
            '           \'radio-normal-unchecked-icon\' : (ngModel!=option[optionValue] && disabled!=\'true\'), ' +
            '           \'radio-normal-checked-icon\': (ngModel==option[optionValue] && disabled!=\'true\'),' +
            '           \'radio-disabled-checked-icon\': (ngModel!=option[optionValue] && disabled==\'true\'),' +
            '           \'radio-disabled-unchecked-icon\': (ngModel==option[optionValue] && disabled==\'true\') ' +
            '           }"></div>' +
            '       <div class="caption">{{option[optionText]}}</div>' +
            '   </div>'+
            '</div>',
            link: function ($scope, $elem, attrs) {
                //Options
                $scope.group = $scope.group || _.uniqueId('radio-group-');

                //public method
                $scope.onRadioClick = function (option) {
                    if($scope.uncheckable == 'true'){
                        if($scope.ngModel == option[$scope.optionValue]){
                            $scope.ngModel = null;
                        }else{
                            $scope.ngModel = option[$scope.optionValue];
                        }
                    }else{
                        $scope.ngModel = option[$scope.optionValue];
                    }

                    if($scope.onItemChanged){
                        $timeout(function(){
                            $scope.onItemChanged($scope.ngModel);
                        });
                    }

                    //触发onChange事件
                    var event = document.createEvent('HTMLEvents');
                    event.initEvent("change", true, true);
                    event.eventType = 'message';
                    if( $elem[0].dispatchEvent) {
                        return  $elem[0].dispatchEvent(event);
                    } else if( $elem[0].fireEvent) {
                        return  $elem[0].fireEvent("onchange", event);
                    }
                };
            }

    };
    }]);
'use strict';
angular.module('cccis.angular.common.components.inputField').directive('cccisNumberField', ['$timeout', function ($timeout) {
    var INPUT_TYPE_ARRAY = [
        {key: 'partQty', len: 3, min: 1, max: 999, pattern: /^\+?[1-9][0-9]*$/, description: '配件数量，整数格式'},
        {
            key: 'number',
            len: 60,
            min: null,
            max: null,
            pattern: /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,
            description: "数值类型"
        },
    ];

    var getInputTypeByKey = function (type) {
        var type = _.find(INPUT_TYPE_ARRAY, {key: type});
        if (type == null) {
            return _.find(INPUT_TYPE_ARRAY, {key: 'number'});
        }
        return type;
    };

    return {
        require: 'ngModel',
        restrict: 'E',
        replace: true,
        scope: {
            name: '@',
            ngModel: '=',
            type: '@',
            ngDisabled: '=',
            numberFieldClass: '@',

            invalidFlag: '@',
            placeholder: '@',
            maxlength: '@',
            onDataChange: '=',

            inputIconSupport: '@',
            inputIconCls: '@',

            actionBtnSupport: '@',
            actionBtnCaption: '@',
            onActionBtnClicked: '=',

            ngId: '@'//input id值
        },
        template: '' +
        '<div class="cccis-text-field cccis-number-field input-group field {{numberFieldClass}}" ng-class="{\'disabled\': ngDisabled}">' +
        '   <input ng-if="ngDisabled!=\'true\'" id="{{ngId}}" type="text" name="{{name}}" ng-model="ngModel" ng-change="keyPressValidator()" class="form-control {{input-cls}}" ' +
        '       maxlength="{{maxlength}}" autocomplete="off" autocorrect="off" disableautocomplete placeholder="{{placeholder}}"' +
        '       ng-change="onDataChanged()" ng-blur="onInputBlur()" ng-focus="onInputFocus()"/>' +
        '   <input ng-if="ngDisabled==\'true\'" id="{{ngId}}" type="{{inputType.type}}" ng-model="ngModel" class="form-control {{input-cls}}" disable="true"/>' +
        '   <div ng-if="actionBtnSupport==\'true\'" ng-click="clickActionBtn" class="input-group-addon action-btn {{actionBtnCls}}">{{actionBtnCaption}}</div>' +
        '</div>',
        link: function ($scope, $element, $attrs, $ngModelCtrl) {
            var lastValidValue; //最后一次的合法值

            $scope.type = $scope.type || 'number';
            $scope.name = $scope.name || '';
            $scope.inputType = getInputTypeByKey($scope.type);
            $scope.maxlength = $scope.maxlength != null ? $scope.maxlength : $scope.inputType.len;

            $scope.onLoad = function () {
                lastValidValue = $scope.ngModel;
            };

            /**
             * 输入时，直接检查是否正确。
             */
            $scope.keyPressValidator = function () {
                $scope.isInputInvalid = false;
                var currentValue = $scope.ngModel;

                //regexPatternValidator
                if (currentValue != null && currentValue != '' && $scope.inputType.pattern) {
                    if (!$scope.inputType.pattern.test(currentValue)) {
                        $scope.isInputInvalid = true;
                    }
                }

                if ($scope.isInputInvalid) {
                    $scope.ngModel = lastValidValue;
                }else{
                    lastValidValue =$scope.ngModel;
                }
            };

            /**
             * 焦点移开时，检查值是否正确
             */
            $scope.valueChangeValidator = function () {
                var max = $scope.inputType.max;
                if (max != null) {
                    if (Number($scope.ngModel) > max) {
                        $scope.setModelValue(max);
                    }
                }

                var min = $scope.inputType.min;
                if (min != null) {
                    if (Number($scope.ngModel) < min) {
                        $scope.setModelValue(min);
                    }
                }
            };

            $scope.setModelValue = function (val) {
                $scope.ngModel = val;
                lastValidValue = val;
            };


            $scope.onInputFocus = function () {
                $('.field', $element).addClass('focus');
                $('.form-control',$element).select();
            };

            $scope.onInputBlur = function () {
                $('.field', $element).removeClass('focus');
                $scope.valueChangeValidator();
                $timeout(function(){
                    if($scope.onDataChange){
                        $scope.onDataChange();
                    }
                });
            };

            $scope.clickActionBtn = function () {
                if ($scope.onActionBtnClicked) {
                    $scope.onActionBtnClicked();
                }
            };

            $scope.onLoad();
        }
    }
}])
;
'use strict';
angular.module('cccis.angular.common.components.inputField').directive('cccisPasswordField', function () {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            ngModel: '=',
            placeholder: '@',
            ngDisabled: '=',
            passwordFieldClass: '@',

            ngId: '@'//input id值
        },
        template: '' +
        '<div class="cccis-text-field cccis-password-field input-group field {{passwordFieldClass}}" ng-class="{\'disabled\': ngDisabled}">' +
        '       <input id="{{ngId}}" type="{{pwdType}}" ng-model="ngModel" placeholder="{{placeholder}}" maxlength="14" ' +
        '               autocorrect="false" autocomplete="new-password" class="form-control {{input-cls}}" ' +
        '               ng-blur="onInputBlur()" ng-focus="onInputFocus()"/>' +
        '       <span ng-if="pwdType!=\'text\' && ngModel.length > 0" class="input-group-inner-addon glyphicon glyphicon-eye-open" title="显示密码" ng-click="changePwdType()"></span>' +
        '       <span ng-if="pwdType==\'text\'  && ngModel.length > 0" class="input-group-inner-addon glyphicon glyphicon-eye-close" title="隐藏密码" ng-click="changePwdType()"></span>' +
        '</div>',

        link: function ($scope, $element) {
            $scope.pwdType = "password";
            $scope.changePwdType = function () {
                $scope.pwdType = $scope.pwdType == "password" ? "text" : "password";
            };

            //只能是字母或者数字
            $scope.$watch('ngModel', function (newVal, oldVal) {
                var password = /^[A-Za-z0-9]+$/;
                if (newVal != null && newVal != "" && newVal.trim() != null) {
                    if (password.test(newVal)) {
                        $scope.ngModel = newVal;
                    } else {
                        $scope.ngModel = oldVal;
                    }
                }
            });

            $scope.onInputFocus = function () {
                $('.field', $element).addClass('focus');
                $('.form-control',$element).select();
            };

            $scope.onInputBlur = function () {
                $('.field', $element).removeClass('focus');
            };

        }
    }
});
'use strict';
angular.module('cccis.angular.common.components.inputField').directive('cccisRemarkField', [function () {
    return {
        restrict: 'E',
        require: 'ngModel',
        replace: true,
        scope: {
            caption: '@',
            requiredMark: '@',
            ngId: '@',//input id值
            ngModel: '=',

            ngDisabled: '=',
            remarkFieldClass: '@',
            maxLength: '@',
        },
        template: '' +
        '<div class="cccis-remark-field {{remarkFieldClass}}">' +
        '   <div class="header">' +
        '       <div class="caption">' +
        '           <label ng-if="requiredMark==\'true\'" class="required-mark">*</label>' +
        '           <label title="{{caption}}">{{caption}}</label>' +
        '       </div>' +
        '       <div class="word-counter">({{length}}/{{maxLength}})</div>' +
        '   </div>' +
        '   <textarea ng-model="ngModel" ng-trim="false"  ng-disabled="{{ngDisabled}}" maxlength="{{ctrl.maxLength}}" class="content"></textarea>' +
        '</div>',

        link: function ($scope, $element, $attrs, $ngModelCtrl) {
            $scope.onLoad = function () {
                $scope.$watch('ngModel', function() {
                    var value = $scope.ngModel;

                    $scope.length =value ? value.replace(/\n/g, '').length : 0;
                    var maxLength = Number($scope.maxLength);
                    if ($scope.length > maxLength) {
                        value = value.substring(0, value.length - ($scope.length - maxLength));
                    }
                    $scope.ngModel = value;
                });
            };

            $scope.onLoad();
        }
    }
}])
;
'use strict';
angular.module('cccis.angular.common.components.inputField').directive('cccisTextField', ['$timeout', function ($timeout) {
    var INPUT_TYPE_ARRAY = [
        {key: 'text', type: 'text', len: 60, pattern: '', description: ''},
        {key: 'name', type: 'text', len: 60, pattern: /[&\|\\\*^%$#@\-]/g, description: "姓名,联系人,合同联系人"},
        {key: 'url', type: 'url', len: 60, pattern: '', description: "URL类型"},
        {key: 'address', type: 'text', len: 500, pattern: /[&\|\\\*^%$#@\-]/g, description: '地址'},
        {key: 'tel', type: 'tel', len: 20, pattern: /^(\d|\-|\(|\)|\s)*$/, description: '电话号码，手机号'},
        {key: 'email', type: 'email', len: 20, pattern: '', description: '邮件'},
        {key: 'captcha', type: 'text', len: 4, pattern: '', description: ''},
        {key: 'orderNo', type: 'text', len: 100, pattern: /[^a-zA-Z0-9/\s/g]/g, description: ''},
    ];

    var getInputTypeByKey = function (type) {
        var type = _.find(INPUT_TYPE_ARRAY, {key: type});
        if (type == null) {
            return _.find(INPUT_TYPE_ARRAY, {key: 'text'});
        }
        return type;
    };

    return {
        require: 'ngModel',
        restrict: 'E',
        replace: true,
        scope: {
            ngId: '@',
            ngModel: '=',
            type: '@',
            placeholder: '@',
            ngDisabled: '@',
            textFieldClass: '@',

            actionBtnSupport: '@',
            actionBtnCaption: '@',
            onActionBtnClicked: '=',

            onDataChanged: '&',
        },
        template: '' +
        '<div class="text-field input-group {{textFieldClass}}" ng-class="{\'disabled\': ngDisabled}">' +
        '   <input ng-if="ngDisabled!=\'true\'" id="{{ngId}}" type="{{inputType.type}}" ng-model="ngModel" class="form-control {{input-cls}}" ' +
        '               maxlength="{{inputType.len}}" autocomplete="off" autocorrect="off" disableautocomplete placeholder="{{placeholder}}"' +
        '               ng-change="onDataChanged()" ng-blur="onInputBlur()" ng-focus="onInputFocus()"/>' +
        '   <input ng-if="ngDisabled==\'true\'" id="{{ngId}}" type="{{inputType.type}}" ng-model="ngModel" class="form-control {{input-cls}}" disable="true"/>' +
        '   <div ng-if="actionBtnSupport==\'true\'" ng-click="clickActionBtn" class="input-group-addon action-btn {{actionBtnCls}}">{{actionBtnCaption}}</div>' +
        '</div>',
        link: function ($scope, $element, $attrs, $ngModelCtrl) {
            $scope.type = $scope.type || 'text';
            $scope.inputType = getInputTypeByKey($scope.type);

            $scope.onLoad = function () {
                $ngModelCtrl.$formatters.push(function (v) {
                    if ($scope.type != 'tel' && $scope.type != 'number' && $scope.type != 'url') {
                        //except the type of tel,number and url
                        if ($scope.inputType.pattern) {
                            if (v) {
                                v = v.replace($scope.inputType.pattern, "");
                            }
                        }
                    }
                    $scope.ngModel = v;
                });

                $scope.$watch('ngModel', function (newVal, oldVal) {
                    //format the type of tel or number
                    if ($scope.type === 'tel') {
                        if (newVal != null && newVal != "" && newVal.trim() != null) {
                            if ($scope.inputType.pattern.test(newVal)) {
                                $scope.ngModel = newVal;
                            } else {
                                $scope.ngModel = oldVal;
                            }
                        }
                    }
                    //针对不同的控件类型，特殊处理
                    if ($scope.type === 'url') {
                        // if the type of url is invalidate,then setting the resultValue to null.
                        if ($scope.ngModel != null && $scope.ngModel != "" && $scope.ngModel.trim() != null) {
                            if (!$scope.inputType.pattern.test($scope.ngModel)) {
                                $scope.ngModel = '';
                            }
                        }
                    }
                });
            };

            /**
             * 焦点选中Input元素时，将焦点设置到外部DIV边框上
             */
            $scope.onInputFocus = function () {
                $('.text-field', $element).addClass('focus');
                $('.form-control', $element).select();
            };

            /**
             * 焦点移出Input元素时，去除外部DIV边框的焦点效果
             */
            $scope.onInputBlur = function () {
                $('.text-field', $element).removeClass('focus');

            };

            $scope.clickActionBtn = function () {
                if ($scope.onActionBtnClicked) {
                    $scope.onActionBtnClicked();
                }
            };

            $scope.onLoad();
        }
    }
}])
;
angular.module('cccis.angular.common.components.loadingMask').directive('cccisLoadingMask', ['$rootScope', 'cccisLoadingMaskProvider', function ($rootScope, cccisLoadingMaskProvider) {
    return {
        restrict: 'E',
        replace: true,
        scope: {
        },
        link: function (scope, element, attrs) {
            scope.queryMessage = scope.message;
            cccisLoadingMaskProvider.setLoadingInstance(function (status, msg) {
                if (status == 1) {
                    scope.message = msg || '请稍候。。。';
                    angular.element(".loading-mask").css("display", "flex");
                }else{
                    scope.message = '';
                    angular.element(".loading-mask").css("display", "none");
                }
            });
        },
        template: '' +
        '<div class="cccis-loading-mask">' +
        '       <div class="blank"/>' +
        '       <img class="loading-mask-img" src="images/loading-mask-image.gif"/>' +
        '       <span class="loading-mask-msg">{{message}}</span>' +
        '       <div class="blank"/>' +
        '   </div>' +
        '</div>'
    }
}]);

'use strict';
/***
 * Loading-Mask的控制API的单例实现
 */
angular.module('cccis.angular.common.components.loadingMask').factory('cccisLoadingMaskProvider', [function () {
    var status = 0;
    var loadingInstance;

    return {
        start: function (msg) {
            status = 1;
            loadingInstance(status, msg);
        },

        complete: function () {
            status = 0;
            loadingInstance(status);
        },

        status: status,

        setLoadingInstance: function (instance) {
            loadingInstance = instance;
        }
    }
}]);
'use strict';
angular.module('cccis.angular.common.components.notify').directive("cccis-notify", ['$compile', '$timeout', function ($compile, $timeout) {
    var template = '' +
        '<div class="cccis-notify">' +
        '   <div ng-if="closable==\'true\'" ng-click="close()" class="icon close-icon" style="cursor: pointer;z-index: 9000;"/>' +
        '   <div class="content">{{content}}</div>' +
        '</div>';

    return {
        restrict: 'EA',
        scope: {
            options: '=',
            api: '='

        },
        replace: true,
        transclude: true,
        link: function ($scope, $element, attrs) {
            $scope.onLoad =function(){
                $element.css({'left': '0px', 'top': '0px'});
            };

            $scope.onLoad();
        },
        template: template
    };
}]);
'use strict';
angular.module('cccis.angular.common.components.notify').provider("cccisNotifyProvider", [function () {
    return {
        $get: function ($templateRequest, $controller, $rootScope, $compile, $document, $q, $timeout) {
            return {
                //return as promise
                notify: function (messageHtml, duration, speed) {
                    var deferred = $q.defer();
                    messageHtml = messageHtml?messageHtml:'notification';
                    duration = duration ==null?2000:duration;
                    speed = speed==null?1:speed;

                    var $notifyScope = null;
                    var $element = null;

                    var onLoad = function(){
                        var html = ''+
                            '<div class="cccis-notify">' +
                            '   <div class="icon close-icon cursor-pointer" ng-click="close()"></div>'+
                            '   <div class="message">'+messageHtml +'</div>'+
                            '</div>';
                        var template = angular.element(html);
                        $notifyScope = $rootScope.$new();

                        $element = $compile(template)($notifyScope);
                        $('body').append($element);

                        $element.css('top', -1 * $element.outerHeight(true));
                        $element.css('visibility', 'visible');


                        $notifyScope.close = function(){
                            $element.remove();
                        };
                    };

                    var init = function(){
                        $timeout(function () {
                            deferred.resolve($notifyScope);

                           //设置动画样式
                            $element.css('transition','top '+speed+'s');
                            $element.css('top',0);

                            $timeout(function () {
                                //展示完毕，等待n秒
                                if (duration > 0) {
                                    $timeout(function () {
                                        //关闭元素
                                        $element.css('top', -1 * $element.outerHeight(true));

                                        $timeout(function () {
                                            $element.remove();
                                        }, speed*1000);
                                    }, duration);
                                }
                            }, speed*1000);
                        });


                    };

                    onLoad();
                    init();

                    return deferred.promise;
                }
            };
        }
    };
}]);
angular.module('cccis.angular.common.components.panel').directive('cccis-panel', ['$timeout', function ($timeout) {
    return {
        scope: {
            collapsible: '@',
            collapsed: '@',
            withHeading: '@',
            headingCaption: '@',
            panelClass: '@',
            onCollapseStatusChanged: '=',
        },
        restrict: 'E',
        transclude: true,
        link: function ($scope, elem, attrs) {
            $scope.onLoad = function () {
            };

            $scope.onPanelHeadingDblClicked = function () {
                if ($scope.collapsible == 'true') {
                    $scope.changePanelCollapseStatus();
                }
            };

            $scope.changePanelCollapseStatus = function () {
                if ($scope.collapsed) {
                    $scope.collapsed = false;
                } else {
                    $scope.collapsed = true;
                }

                if ($scope.onCollapseStatusChanged) {
                    $scope.onCollapseStatusChanged($scope.collapsed);
                }
            };

            $scope.onLoad();
        },
        template: '' +
        '<div class="panel panel-primary cccis-panel {{panelClass}}">' +
        '   <div ng-if="withHeading" class="panel-heading" ng-dblclick="onPanelHeadingDblClicked()">' +
        '       <div class="caption">{{ headingCaption }}</div>' +
        '       <div class="action-bar">' +
        '           <i ng-if="collapsible!=\'false\'" ng-click="changePanelCollapseStatus()" ng-class="{\'glyphicon glyphicon-chevron-down\': !collapsed , \'glyphicon glyphicon-chevron-right\': collapsed}"></i>' +
        '       </div>' +
        '   </div>' +
        '   <div ng-hide="collapsed" class="panel-body" ng-show="initStatus" ng-transclude>' +
        '   </div>' +
        '</div>'
    }
}]);
angular.module('cccis.angular.common.components.panel').directive("cccisPopupPanel", ['$templateCache', '$timeout', function ($templateCache, $timeout) {
    return {
        restrict: 'E',
        replace: true,
        transclude: true,
        scope: {
            panelCls: '@',
            api: '=',
            direction: '@',//在当前元素上方或下方显示该PopupPanel[above|below]
            align: '@', //与当前元素水平对齐方式[left|center|right]
            arrowFlag: '@', //是否显示箭头标记[true|false]
            offsetY: '@', //弹出框与当前元素的偏差值[number]
            boxShadow: '@' //是否有边框阴影效果
        },
        template: '' +
        '<div class="cccis-popup-panel">' +
        '   <div ng-if="arrowFlag==\'true\' && actualDirection==\'below\'" style="width:100%;font-size: 30px;text-align: center;line-height:0px;margin-top: 0px;position: absolute;color: #a7bac9;">&#9670;</div>' +
        '   <div ng-if="arrowFlag==\'true\' && actualDirection==\'below\'" style="width:100%;font-size: 30px;text-align: center;line-height:0px;margin-top: 2px;position: absolute;color: #edf6fb;">&#9670;</div>' +
        '   <div class="{{panelCls}}" style="width:{{width}};overflow: hidden;" ng-transclude>' +
        '   </div>' +
        '   <div ng-if="arrowFlag==\'true\' && actualDirection==\'above\'" style="width:100%;font-size: 30px;text-align: center;line-height:0px;margin-top: 0px;position: relative;color: #a7bac9;">&#9670;</div>' +
        '   <div ng-if="arrowFlag==\'true\' && actualDirection==\'above\'" style="width:100%;font-size: 30px;text-align: center;line-height:0px;margin-top: -2px;position: relative;color: #edf6fb;">&#9670;</div>' +
        '</div>',
        link: function ($scope, $element, attrs) {
            $scope.onLoad = function () {
                $('body').append($element);

                // init explore api
                $scope.$watch('api', function (newVal, oldVal) {
                    if ($scope.api) {
                        $scope.api.popup = $scope.popup;
                        $scope.api.closeWindow = $scope.closeWindow;
                        $scope.api.setPosition = $scope.setPosition;
                    }
                });
            };

            /**
             * @param inputElement - 默认情况下，在当前控件的左下方展示popup panel
             * @param panelHeight - panel高度，没有填的话，就是自适应高度
             */
            $scope.popup = function (inputElement, panelWidth, panelHeight) {
                $scope.show();
                $scope.setPosition(inputElement, panelWidth, panelHeight);
            };

            $scope.closeWindow = function () {
                $scope.hide();
            };

            /**
             * @param inputElement: 默认基于inputElement的左侧进行popup
             */
            $scope.setPosition = function (inputElement) {
                $scope.setPosition(inputElement, null, null);
            };

            $scope.show = function () {
                $element.show();

                var closeFun = function (e) {
                    var clickInside = $(e.target).closest('popup-panel');
                    if (clickInside.length <= 0) {
                        $scope.hide();
                    } else {
                        $(document).one("click", closeFun);
                    }
                };

                $timeout(function () {
                    $(document).one("click", closeFun);
                }, 500);
            };

            $scope.hide = function () {
                $element.hide();
            };

            $scope.setPosition = function (inputElement, width, height) {
                if (!inputElement) {
                    return;
                }
                // 修复bug15972，overflow的效果等同于overflow-x + overflow-y，操作overflow时不会单独的操作overflow-x和overflow-y
                var bodyOverflowX = $(document.body).css('overflow-x');
                var bodyOverflowY = $(document.body).css('overflow-y');
                $('body').css('overflow', 'hidden');
                $element.css('visibility', 'hidden');

                $timeout(function () {
                    var contentHeight = 0;
                    if (height > 0) {
                        contentHeight = height;
                    } else {
                        //auto height condition, 根据内容自动展开高度
                        contentHeight = $element.find('.popupPanel').height();
                    }

                    var align = $scope.align;
                    if (align != 'center' && align != 'left' && align != 'right') {
                        //默认值-相对位置，与inputElement靠左中右对齐
                        align = 'left';
                    }

                    var x = inputElement.offset().left;
                    var y = inputElement.offset().top + inputElement.height();

                    if (align == 'left') {
                        x = inputElement.offset().left;
                    } else if (align == 'center') {
                        x = inputElement.offset().left + inputElement.outerWidth() / 2 - $element.outerWidth() / 2;
                    } else if (align == 'right') {
                        x = inputElement.offset().left + inputElement.outerWidth() - $element.outerWidth();
                    }

                    var direction = $scope.direction;
                    if (direction != 'above' && direction != 'below') {
                        //默认值-自适应方向的情况
                        if (y + contentHeight + 5 > $(window).height()) {
                            direction = 'above';
                        } else {
                            direction = 'below';
                        }
                    }
                    $scope.actualDirection = direction;

                    if (direction == 'above') {
                        //show dialog above
                        y = inputElement.offset().top - contentHeight - ($scope.offsetY ? parseInt($scope.offsetY) : 0);
                        if ($scope.boxShadow == 'true') {
                            $element.find('.popupPanel').css('box-shadow', '3px -3px 2px gray');
                        }
                    } else if (direction == 'below') {
                        //show dialog below
                        y = inputElement.offset().top + inputElement.height() + 5 + ($scope.offsetY ? parseInt($scope.offsetY) : 0);
                        if ($scope.boxShadow == 'true') {
                            $element.find('.popupPanel').css('box-shadow', '3px 3px 2px gray');
                        }
                    }
                    $element.css({'left': x + 'px', 'top': y + 'px'});

                    //auto height condition, 根据内容自动展开高度
                    if (height) {
                        $($element.children()[0]).css('height', height + 'px');
                    }

                    //auto condition, 根据内容自动展开宽度
                    if (width) {
                        $($element.children()[0]).css('width', (width + 2) + 'px'); //加上内部左右边框的距离
                    }

                    $element.css('visibility', 'visible');
                    $(document.body).css({'overflow-x': bodyOverflowX, 'overflow-y': bodyOverflowY});
                });
            };

            $scope.onLoad();
        }
    };
}]);
/**
 * 码表客户端
 */
angular.module('cccis.angular.common.utils').factory('cccisCodeTableUtils', ['$q', 'cccisUrlUtils', function ($q, cccisUrlUtils) {
    var KEY_PARTS_CODE_TYPE_LIST = 'CODE_TYPE_LIST'; //维护所有的码表类型
    var KEY_PARTS_CODE_PREFIX = 'CODE_TYPE_'; //CodeType相关的码表
    /**
     * 从服务端重新获取CodeTable
     */
    var fetchCodeTableMap = function () {
        var deferred = $q.defer();

        var codeTableMap = [];
        cccisUrlUtils.postJsonData("/base/codeTable/listAll", {}).then(function (data) {
            if (data.result != cccisUrlUtils.RESULT.SUCCESS) {
                console.log(data.message);
                deferred.resolve(null);
            } else {
                codeTableMap = data.codeTableMap;
                deferred.resolve(codeTableMap);
            }

        });
        return deferred.promise;
    };

    var initCodeTable = function (forceFlag) {
        var deferred = $q.defer();
        var partsCodeTypeList = localStorage.getItem(KEY_PARTS_CODE_TYPE_LIST);
        if (partsCodeTypeList && !forceFlag) {
            deferred.resolve(true);
        } else {
            var codeTypeIds = [];
            fetchCodeTableMap().then(function (codeTableMap) {
                if (codeTableMap) {
                    _.each(codeTableMap, function (codeTable, codeTypeId) {
                        codeTypeIds.push(codeTypeId);
                        localStorage.setItem(KEY_PARTS_CODE_PREFIX + codeTypeId, Base64.encode(JSON.stringify(codeTable)));
                    });
                    localStorage.setItem(KEY_PARTS_CODE_TYPE_LIST, Base64.encode(JSON.stringify(codeTypeIds)));
                    deferred.resolve(true);
                } else {
                    deferred.resolve(false);
                }
            })
        }
        return deferred.promise;
    };

    /**
     * 取得指定CodeTypeId对应的code
     */
    var getCodesByType = function (codeTypeId) {
        var codeTableJSON = localStorage.getItem(KEY_PARTS_CODE_PREFIX + codeTypeId);
        if (codeTableJSON) {
            return JSON.parse(Base64.decode(codeTableJSON));
        } else {
            return [];
        }
    };

    /**
     * 取得指定CodeTypeId对应的code
     */
    var getCodeByTypeAndCode = function (codeTypeId, codeId) {
        var codeTable = getCodesByType(codeTypeId);
        return _.find(codeTable, {'codeId': codeId});
    };

    /**
     * 取得指定CodeTypeId对应的code
     */
    var getCodeValueByTypeAndCode = function (codeTypeId, codeId) {
        var code = getCodeByTypeAndCode(codeTypeId, codeId);
        if(code){
            return code.text;
        }else{
            return code;
        }
    };


    return {
        initCodeTable: initCodeTable,
        getCodesByType: getCodesByType,
        getCodeByTypeAndCode: getCodeByTypeAndCode,
        getCodeValueByTypeAndCode: getCodeValueByTypeAndCode
    };
}]);
'use strict';
angular.module('cccis.angular.common.utils').factory('cccisDecimalUtils', [function () {
    return {
        plus: function (valA, valB, valC, valD, valE) {
            var a = new Decimal(Number(valA || 0));
            var b = new Decimal(Number(valB || 0));
            var c = new Decimal(Number(valC || 0));
            var d = new Decimal(Number(valD || 0));
            var e = new Decimal(Number(valE || 0));
            return a.plus(b).plus(c).plus(d).plus(e).toNumber();
        },
        plusWithP2: function (valA, valB, valC, valD, valE) {
            var value = this.plus(valA, valB, valC, valD, valE);
            return Number(value).toFixed(2);
        },
        minus: function (valA, valB, fractionalDigits) {
            var a = new Decimal(Number(valA || 0));
            var b = new Decimal(Number(valB || 0));

            var value = a.minus(b).toNumber();
            if(fractionalDigits == null){
                return value;
            }else{
                return value.toFixed(fractionalDigits);
            }
        },

        multiply: function (valA, valB, valC, valD, valE) {
            var value = null;
            var a = new Decimal(Number(valA || 0));
            var b = new Decimal(Number(valB || 0));
            value = a.mul(b);

            if(valC == null){
                return value.toNumber();
            }

            var c = new Decimal(Number(valC || 0));
            value = value.mul(c);
            if(valD == null){
                return value.toNumber();
            }

            var d = new Decimal(Number(valD || 0));
            value = value.mul(d);
            if(valE == null){
                return value.toNumber();
            }
            var e = new Decimal(Number(valE || 0));
            value = value.mul(e);

            return value.toNumber();
        },

        multiplyWithP2: function (valA, valB, valC, valD, valE) {
            var value = this.multiply(valA, valB, valC, valD, valE);
            return Number(value).toFixed(2);
        },

        multiplyWithP1: function (valA, valB, valC, valD, valE) {
            var value = this.multiply(valA, valB, valC, valD, valE);
            return Number(value).toFixed(1);
        },

        dividing: function (a, b, fractionalDigits) {
            if (!a) {
                a = 0;
            } else {
                a = parseFloat(a + "");
            }

            if (!b) {
                b = 0;
                //被除数为零，基于drp业务，返回零
                if(fractionalDigits == null){
                    return Number(0)
                }else{
                    return Number(0).toFixed(fractionalDigits);
                }

            } else {
                b = parseFloat(b + "");
            }

            if(fractionalDigits == null){
                return parseFloat(Number(a / b));
            }else{
                return parseFloat((Number(a / b)).toFixed(fractionalDigits));
            }
        },

        dividingWithP2: function (a, b) {
            return this.dividing(a,b,2);
        },

        dividingWithP1: function (a, b) {
            return this.dividing(a,b,1);
        }
    };
}]);
angular.module('cccis.angular.common.utils').factory('cccisLocalAreaUtils', ['$q', 'cccisUrlUtils', function ($q, cccisUrlUtils) {
    var KEY_LOCAL_AREA_TREE = 'KEY_LOCAL_AREA_TREE';
    /**
     * 从服务端重新获取localAreaMap
     */
    var fetchLocalAreaMap = function () {
        var deferred = $q.defer();

        cccisUrlUtils.postJsonData("/base/localArea/listAll", {}).then(function (data) {
            if (data.result != cccisUrlUtils.RESULT.SUCCESS) {
                console.log(data.message);
                deferred.resolve(null);
            } else {
                deferred.resolve(data.localAreaMap);
            }

        });
        return deferred.promise;
    };

    var initLocalAreaTree = function () {
        var deferred = $q.defer();
        var localAreaTree = localStorage.getItem(KEY_LOCAL_AREA_TREE);
        if (localAreaTree) {
            deferred.resolve(true);
        } else {
            fetchLocalAreaMap().then(function (localAreaMap) {
                if (localAreaMap) {
                    localStorage.setItem(KEY_LOCAL_AREA_TREE, Base64.encode(JSON.stringify(localAreaMap)));
                    deferred.resolve(true);
                } else {
                    deferred.resolve(false);
                }
            })
        }
        return deferred.promise;
    };

    /**
     * 取得全国行政树
     */
    var getLocalAreaMap = function () {
        var localAreaTreeJSON = localStorage.getItem(KEY_LOCAL_AREA_TREE);
        if (localAreaTreeJSON) {
            return JSON.parse(Base64.decode(localAreaTreeJSON));
        } else {
            return null;
        }
    };

    var getLocalAreaByAreaId = function(areaId){
        var map = getLocalAreaMap();
        if(map){
           return map[areaId];
        }else{
            return null;
        }
    };

    /**
     * 根据addressType， build地址字符串
     */
    var buildWholeLocalAddress = function(addressType){
        if(addressType==null){
            return '';
        }

        var addressArray = [];
        if(addressType.provinceId){
            var province = getLocalAreaByAreaId(addressType.provinceId);
            if(province){
                addressArray.push(province.areaName);
            }
        }
        if(addressType.cityId){
            var city = getLocalAreaByAreaId(addressType.cityId);
            if(city){
                addressArray.push(city.areaName);
            }
        }
        if(addressType.distinctId){
            var distinct = getLocalAreaByAreaId(addressType.distinctId);
            if(distinct){
                addressArray.push(distinct.areaName);
            }
        }
        if(addressType.address){
            addressArray.push(addressType.address);
        }
        return addressArray.join('');
    };

    return {
        initLocalAreaTree: initLocalAreaTree,
        getLocalAreaTree: getLocalAreaMap,
        getLocalAreaByAreaId: getLocalAreaByAreaId,
        buildWholeLocalAddress: buildWholeLocalAddress
    };
}]);
angular.module('cccis.angular.common.utils').factory('cccisUrlUtils', ['$location', 'Restangular', '$window', '$q', function ($location, Restangular, $window, $q) {
    var postPath;
    var dialogProvider;
    //网络请求返回状态
    var RESULT = {
        SUCCESS: 'success',
            FAILURE: 'failure'
    };


    return {
        setAppErrorDialogProvider: setAppErrorDialogProvider,
        getPath: getPath,
        postJsonData: postJsonData,
        postFormData: postFormData,
        getJsonData: getJsonData,
        getFormData: getFormData,
        RESULT: RESULT
    };

    function setAppErrorDialogProvider(appErrorDialogProvider) {
        dialogProvider = appErrorDialogProvider;
    }

    function getPath(path) {
        if (angular.isUndefined(postPath)) {
            var strPath = $window.document.location.pathname;
            postPath = strPath.substring(0, strPath.substr(1).indexOf('/') + 1);
        }
        return postPath + path;
    }

    /**
     * 提交json数据
     */
    function postJsonData(url, jsonObj, silentFlag) {
        var deferred = $q.defer();
        Restangular.all(this.getPath(url)).post(jsonObj, {}, {'Content-Type': 'application/json; charset=UTF-8'}).then(
            function (result) {
                dataErrorHandler(result, silentFlag);
                deferred.resolve(result);
            }, function (result) {
                httpErrorHandler(result, silentFlag);
            });
        return deferred.promise;
    }

    /**
     * 提交json数据
     */
    function getJsonData(url, jsonObj, silentFlag) {
        var deferred = $q.defer();
        Restangular.all(this.getPath(url)).get(jsonObj, {}, {'Content-Type': 'application/json; charset=UTF-8'}).then(
            function (result) {
                dataErrorHandler(result, silentFlag);
                deferred.resolve(result);
            }, function (result) {
                httpErrorHandler(result, silentFlag);
            });
        return deferred.promise;
    }

    /**
     * 提交Form数据
     */
    function postFormData(url, jsonObj, silentFlag) {
        var deferred = $q.defer();
        var params = getUrlParam(jsonObj);
        Restangular.all(this.getPath(url)).post(params, {}, {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}).then(
            function (result) {
                dataErrorHandler(result, silentFlag);
                deferred.resolve(result);
            }, function (result) {
                httpErrorHandler(result, silentFlag);
            });
        return deferred.promise;
    }

    /**
     * 提交Form数据
     */
    function getFormData(url, jsonObj, silentFlag) {
        var deferred = $q.defer();
        var params = getUrlParam(jsonObj);
        Restangular.all(this.getPath(url)).get(params, {}, {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}).then(
            function (result) {
                dataErrorHandler(result, silentFlag);
                deferred.resolve(result);
            }, function (result) {
                httpErrorHandler(result, silentFlag);
            });
        return deferred.promise;
    }

    function getUrlParam(params) {
        var param = '';
        _.each(params, function (i, val) {
            param += val + '=' + i + '&';
        });
        if (param) {
            param = param.substring(0, param.length - 1);
        }
        return param;
    }

    /**
     * 系统处理出错的情况
     */
    function dataErrorHandler(data, silentFlag) {
        if (data.result == RESULT.SUCCESS) {
            return;
        }
        if(data.result==null && Object.prototype.toString.call(data) === "[object String]" && data.indexOf('partsApp')>0){
            //100%是因为session失效
            if(!silentFlag && dialogProvider) {
                dialogProvider.showAppErrorDialog("您的操作已超时，系统将自动退出。").then(function($dialogScope){
                    $dialogScope.onDialogClose = function(){
                        window.location.href = getPath('');
                    }
                });
            }
        }
        //需要处理的系统异常情况
        if (data.result == RESULT.FAILURE) {
            if (data.code == '1') {
                //您操作的订单不是最新数据，请重新打开订单后再修改。
                if(!silentFlag && dialogProvider) {
                    dialogProvider.showAppErrorDialog(data.message);
                }
            }else if (data.code == '2') {
                //您没有权限查看订单。
                if(!silentFlag && dialogProvider) {
                    dialogProvider.showAppErrorDialog(data.message);
                }
            } else {
                var message=data&&data.message?data.message:data;
                console.error("http error:"+message);
                if(!silentFlag && dialogProvider) {
                    dialogProvider.showAppErrorDialog(message);
                }
            }
        }
    };

    /**
     * 网络等无法handle的系统异常情况(SpringMVC对异常的封装)
     */
    function httpErrorHandler(data, silentFlag) {
        if (data.status == 500) {
            if(!silentFlag && dialogProvider){
                dialogProvider.showAppErrorDialog("服务器异常。");
            }
            console.log(data.statusText);
        } else {
            console.error(data.statusText);
        }
    }
}]);
angular.module('cccis.angular.common.utils').factory('cccisUserUtils', ['cccisUrlUtils', '$q', 'Restangular', function (cccisUrlUtils, $q, Restangular) {
    var currentUser = null;
    var menus = [];
    var SESSION_KEY_USER = 'CURRENT_USER';

    var path = cccisUrlUtils.getPath("/authentication/user/getCurrentUser");

    return {
        getCurrentUser: getCurrentUser,
        loadUser: loadUser,
        simulateLogin: simulateLogin,
        logout: function(){
            var path = cccisUrlUtils.getPath("/userAction/userLogout");

            var _self = this;
            var defer = $q.defer();
            Restangular.all(path).post({}, {}, {'Content-Type': 'application/json; charset=UTF-8'}).then(function (response) {
                if (response.result == cccisUrlUtils.RESULT.SUCCESS) {
                    currentUser = null;
                    menus = null;
                    window.sessionStorage.removeItem(SESSION_KEY_USER);
                    _self.loadUserMenuWithPromise().then(function (loadMenuResponse) {
                        if (loadMenuResponse.result == cccisUrlUtils.RESULT.SUCCESS) {
                            menus = loadMenuResponse.menus;
                        }
                        defer.resolve(response);
                    });
                }
            });
            return defer.promise;
        },
        clear: function () {
            currentUser = null;
        }
    };

    function getCurrentUser(){
        return currentUser;
    }


    function loadUser() {
        var deferred = $q.defer();
        if (currentUser == null) {
            var currentUserStr = window.sessionStorage.getItem(SESSION_KEY_USER);
            if (currentUserStr && currentUserStr!='null') {
                currentUser = JSON.parse(currentUserStr);
                deferred.resolve(currentUser);
            }else{
                var url = "/authentication/user/getCurrentUser";
                cccisUrlUtils.postFormData(url, {}).then(function (data) {
                    if (data.result == cccisUrlUtils.RESULT.SUCCESS) {
                        currentUser = data.user;
                        // window.sessionStorage.setItem(SESSION_KEY_USER, JSON.stringify(currentUser));
                        deferred.resolve(currentUser);
                    }else{
                        currentUser = null;
                        deferred.resolve(null);
                    }
                });
            }
        }else{
            deferred.resolve(currentUser);
        }
        return deferred.promise;
    }

    //模拟登录
    function simulateLogin(loginModel, silentFlag) {
        var deferred = $q.defer();

        if (loginModel == null) {
            console.error("error, param user is null");
            deferred.resolve(null);
        }else{
            cccisUrlUtils.postJsonData("/authentication/simulateLogin", loginModel, silentFlag).then(function(data){
                if (data.result == cccisUrlUtils.RESULT.SUCCESS) {
                    currentUser = data.user;
                    window.sessionStorage.setItem(SESSION_KEY_USER, JSON.stringify(currentUser));
                    deferred.resolve(data);
                }else{
                    currentUser = null;
                    window.sessionStorage.setItem(SESSION_KEY_USER, "");
                    deferred.resolve(data);
                }
            })
        }
        return deferred.promise;
    }

     function getCurrentUser() {
         if (currentUser == null) {
             var currentUserStr = window.sessionStorage.getItem(SESSION_KEY_USER);
             if (currentUserStr) {
                 currentUser = angular.fromJson(currentUserStr);
             }
         }
         return currentUser;
     }

}]);
angular.module('cccis.angular.common.businessComponents.model-validation').run(['$templateCache', function($templateCache) {
  $templateCache.put('common/business-components/model-validation/validation-result-dialog.tpl.html',
    '<div class="cccis-validation-result-dialog">\n' +
    '    <div class="container">\n' +
    '        <div ng-repeat="result in validationErrorResultMap" ng-show="result.errorNum>0 || result.warningNum>0">\n' +
    '            <div id="msg-id-{{result.key}}" class="msg-node" ng-show="isMultiValidationTypeFlag"><span>{{result.title}}提示</span></div>\n' +
    '            <div ng-repeat="(heading, validators) in result.errors track by $index" class="msg-tab">\n' +
    '                <div ng-if="validators.length>0" class="msg-head">{{heading}}</div>\n' +
    '                <div ng-repeat="validator in validators">\n' +
    '                    <div ng-repeat="errorMsg in validator.errorMsgArray" class="msg-item">\n' +
    '                        <i class="glyphicon glyphicon-exclamation-sign" style="color:red"></i>\n' +
    '                        <div style="display: inline" ng-dblclick="locateValidator(validator)">{{errorMsg}}</div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '            <hr ng-if="result.showDividingLineFlag" class="msg-bar" size="1/">\n' +
    '            <div ng-repeat="(heading, validators)  in result.warnings track by $index" class="msg-tab">\n' +
    '                <div ng-if="validators.length>0" class="msg-head">{{heading}}</div>\n' +
    '                <div ng-repeat="validator in validators">\n' +
    '                    <div ng-repeat="errorMsg in validator.errorMsgArray" class="msg-item">\n' +
    '                        <i class="glyphicon glyphicon-exclamation-sign" style="color:#006fb9"></i>\n' +
    '                        <div style="display: inline" ng-dblclick="locateValidator(validator)">{{errorMsg}}</div>\n' +
    '                    </div>\n' +
    '                </div>\n' +
    '            </div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '    <div ng-if="allowSubmitFlag" class="footer">\n' +
    '        <button class="ccc-btn-default" ng-click="clickSubmitBtn()">提交核损</button>\n' +
    '    </div>\n' +
    '</div>');
}]);

angular.module('cccis.angular.common.components.dialog').run(['$templateCache', function($templateCache) {
  $templateCache.put('common/components/dialog/dialog-alert.tpl.html',
    '<div class="cccis-common-dialog-content">\n' +
    '    <div class="content">\n' +
    '        <div ng-bind="content"></div>\n' +
    '    </div>\n' +
    '    <div class="cccis-button-bar">\n' +
    '        <button class="btn btn-primary close-confirm-btn" ng-click="closeAlert()">确定</button>\n' +
    '    </div>\n' +
    '</div>');
}]);

angular.module('cccis.angular.common.components.dialog').run(['$templateCache', function($templateCache) {
  $templateCache.put('common/components/dialog/dialog-confirm.tpl.html',
    '<div class="cccis-common-dialog-content">\n' +
    '    <div class="content">\n' +
    '        <div ng-bind="content"></div>\n' +
    '    </div>\n' +
    '\n' +
    '    <div class="cccis-button-bar">\n' +
    '        <button class="btn btn-primary" style="font-size: small" autofocus="autofocus" ng-click="confirm()">确认</button>\n' +
    '        <button class="btn btn-primary close-confirm-btn" style="font-size: small" ng-click="cancel()">取消</button>\n' +
    '    </div>\n' +
    '</div>');
}]);

angular.module('cccis.angular.common.components.grid').run(['$templateCache', function($templateCache) {
  $templateCache.put('common/components/grid/auto-height-pagination-grid.tpl.html',
    '<div class="cccis-pagination-grid cccis-auto-height-pagination-grid">\n' +
    '    <table class="table table-bordered cccis-table">\n' +
    '        <thead>\n' +
    '        <tr>\n' +
    '            <th ng-if="options.gridHighlightCellStyleFlag" class="grid-highlight-cell">\n' +
    '            </th>\n' +
    '            <th ng-if="options.rowCheckable" class="grid-checkbox-cell">\n' +
    '                <checkbox-field ng-if="options.multiRowCheckable==true" ng-model="allRowCheckedFlag" on-checked="checkAllRows()" checkbox-field-class="checkbox-field-cell">\n' +
    '            </th>\n' +
    '            <th ng-repeat="col in columns" ng-style="col.headStyle" ng-class="{\'cursor-pointer\':col.enableSorting==true}" ng-click="sortData(col, columns)">\n' +
    '                <div ng-if="col.headTemplate" cell-compiler="col.headTemplate" cell-template-scope="col.headTemplateScope"></div>\n' +
    '                <div ng-if="!col.headTemplate">{{col.displayName || col.field}}</div>\n' +
    '                <div ng-if="col.sort == \'desc\'"><i class="glyphicon glyphicon-triangle-bottom"></i></div>\n' +
    '                <div ng-if="col.sort == \'asc\'"><i class="glyphicon glyphicon-triangle-top"></i></div>\n' +
    '            </th>\n' +
    '        </tr>\n' +
    '        </thead>\n' +
    '        <tbody class="no-data-found" ng-if="options.totalRecordCount == 0">\n' +
    '        <tr>\n' +
    '            <td colspan="{{columnCount}}">\n' +
    '                <div style="height:50px">{{options.noDataMessage}}</div>\n' +
    '            </td>\n' +
    '        </tr>\n' +
    '        </tbody>\n' +
    '        <tbody class="data-found" ng-if="options.totalRecordCount > 0">\n' +
    '        <tr ng-repeat="row in gridData" ng-click="selectRow(row)" ng-class="{\'active\':row.$selected}">\n' +
    '            <td ng-if="options.gridHighlightCellStyleFlag" class="grid-highlight-cell"></td>\n' +
    '            <td ng-if="options.rowCheckable" class="grid-checkbox-cell">\n' +
    '                <div class="align-center">\n' +
    '                    <checkbox-field ng-model="row.$checked" on-checked="checkRow(row)" checkbox-field-class="checkbox-field-cell" ng-disabled="row.$checkable == false">\n' +
    '                </div>\n' +
    '            </td>\n' +
    '            <td ng-repeat="col in columns" class="{{col.cellClass}}" ng-style="col.cellStyle">\n' +
    '                <div ng-if="col.cellTemplate" cell-compiler="col.cellTemplate"></div>\n' +
    '                <div ng-if="!col.cellTemplate" title="{{row[col.field]}}">{{row[col.field]}}</div>\n' +
    '            </td>\n' +
    '        </tr>\n' +
    '        </tbody>\n' +
    '    </table>\n' +
    '    <cccis-pagination-bar ng-hide="options.totalRecordCount==0" ng-if="options.paginationSupport==true">\n' +
    '</div>');
}]);

angular.module('cccis.angular.common.components.grid').run(['$templateCache', function($templateCache) {
  $templateCache.put('common/components/grid/fixed-height-pagination-grid.tpl.html',
    '<div class="cccis-pagination-grid cccis-fixed-height-pagination-grid">\n' +
    '    <div class="head-container">\n' +
    '        <table class="table table-bordered cccis-table">\n' +
    '            <thead>\n' +
    '            <tr>\n' +
    '                <th class="grid-highlight-cell">\n' +
    '                </th>\n' +
    '                <th ng-if="options.rowCheckable" class="grid-checkbox-cell">\n' +
    '                    <checkbox-field ng-if="options.multiRowCheckable==true" ng-model="allRowCheckedFlag" on-checked="checkAllRows()" checkbox-field-class="checkbox-field-cell">\n' +
    '                </th>\n' +
    '                <th ng-repeat="col in columns" ng-style="col.headStyle" ng-class="{\'cursor-pointer\':col.enableSorting==true}" ng-click="sortData(col, columns)">\n' +
    '                    <div ng-if="col.headTemplate" cell-compiler="col.headTemplate" cell-template-scope="col.headTemplateScope"></div>\n' +
    '                    <div ng-if="!col.headTemplate">{{col.displayName || col.field}}</div>\n' +
    '                    <div ng-if="col.sort == \'desc\'"><i class="glyphicon glyphicon-triangle-bottom"></i></div>\n' +
    '                    <div ng-if="col.sort == \'asc\'"><i class="glyphicon glyphicon-triangle-top"></i></div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '            </thead>\n' +
    '        </table>\n' +
    '    </div>\n' +
    '    <div class="content-container">\n' +
    '        <table class="table table-bordered cccis-table">\n' +
    '            <thead>\n' +
    '            <tr>\n' +
    '                <th class="grid-highlight-cell">\n' +
    '                </th>\n' +
    '                <th ng-if="options.rowCheckable" class="grid-checkbox-cell">\n' +
    '                    <checkbox-field ng-if="options.multiRowCheckable==true" ng-model="allRowCheckedFlag" on-checked="checkAllRows()" checkbox-field-class="checkbox-field-cell">\n' +
    '                </th>\n' +
    '                <th ng-repeat="col in columns" ng-style="col.headStyle" ng-class="{\'cursor-pointer\':col.enableSorting==true}" ng-click="sortData(col, columns)">\n' +
    '                    <div ng-if="col.headTemplate" cell-compiler="col.headTemplate" cell-template-scope="col.headTemplateScope"></div>\n' +
    '                    <div ng-if="!col.headTemplate">{{col.displayName || col.field}}</div>\n' +
    '                    <div ng-if="col.sort == \'desc\'"><i class="glyphicon glyphicon-triangle-bottom"></i></div>\n' +
    '                    <div ng-if="col.sort == \'asc\'"><i class="glyphicon glyphicon-triangle-top"></i></div>\n' +
    '                </th>\n' +
    '            </tr>\n' +
    '            </thead>\n' +
    '            <tbody class="no-data-found" ng-if="options.totalRecordCount == 0">\n' +
    '            <tr>\n' +
    '                <td colspan="{{columnCount}}">\n' +
    '                    <div style="height:50px">{{options.noDataMessage}}</div>\n' +
    '                </td>\n' +
    '            </tr>\n' +
    '            </tbody>\n' +
    '            <tbody class="data-found" ng-if="options.totalRecordCount > 0">\n' +
    '            <tr ng-repeat="row in gridData" ng-click="selectRow(row)" ng-class="{\'active\':row.$selected}">\n' +
    '                <td class="grid-highlight-cell"></td>\n' +
    '                <td ng-if="options.rowCheckable" class="grid-checkbox-cell">\n' +
    '                    <div class="align-center">\n' +
    '                        <checkbox-field ng-model="row.$checked" on-checked="checkRow(row)" checkbox-field-class="checkbox-field-cell" ng-disabled="row.$checkable == false">\n' +
    '                    </div>\n' +
    '                </td>\n' +
    '                <td ng-repeat="col in columns" class="{{col.cellClass}}" ng-style="col.cellStyle">\n' +
    '                    <div ng-if="col.cellTemplate" cell-compiler="col.cellTemplate"></div>\n' +
    '                    <div ng-if="!col.cellTemplate" title="{{row[col.field]}}">{{row[col.field]}}</div>\n' +
    '                </td>\n' +
    '            </tr>\n' +
    '            </tbody>\n' +
    '        </table>\n' +
    '    </div>\n' +
    '    <cccis-pagination-bar class="fixed-height-pagination-bar" ng-hide="options.totalRecordCount==0" ng-if="options.paginationSupport==true">\n' +
    '</div>');
}]);

angular.module('cccis.angular.common.components.grid').run(['$templateCache', function($templateCache) {
  $templateCache.put('common/components/grid/pagination-bar.tpl.html',
    '<div class="pagination-bar cccis-row">\n' +
    '    <div style="flex:1"></div>\n' +
    '    <div>共{{options.totalRecordCount}}项，每页</div>\n' +
    '    <div>\n' +
    '        <select ng-model="options.pageItemSize" ng-options="di for di in [10, 25, 50]"></select>\n' +
    '    </div>\n' +
    '    <div>项</div>\n' +
    '    <div class="page-bar">\n' +
    '        <div class="page" ng-click="gotoPage(1)">\n' +
    '            <div><span class="icon nav-left-icon" ng-class="options.currentPage==1?\'not-active\':\'\'"></span></div>\n' +
    '        </div>\n' +
    '        <div class="page" ng-if="options.currentGroup > 1" ng-click="gotoPage(firstPageInCurrentGroup - options.groupItemSize)">\n' +
    '            <div><span class="">...</span></div>\n' +
    '        </div>\n' +
    '        <div class="page" ng-repeat="page in pageArray" ng-class="page == options.currentPage?\'page active\':\'page\'" ng-click="gotoPage(page)">\n' +
    '            <div><span class="">{{page}}</span></div>\n' +
    '        </div>\n' +
    '        <div class="page" ng-if="options.currentGroup < maxGroupNum" ng-click="gotoPage(lastPageInCurrentGroup+1)">\n' +
    '            <div><span class="">...</span></div>\n' +
    '        </div>\n' +
    '        <div class="page" ng-click="gotoPage(maxPageNum)">\n' +
    '            <div><span class="icon nav-right-icon" ng-class="(options.currentPage==maxPageNum)?\'not-active\':\'\'"></span></div>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '</div>');
}]);
