angular.module('cccis.angular.common.utils').factory('cccisUserUtils', ['cccisUrlUtils', '$q', 'Restangular', function (cccisUrlUtils, $q, Restangular) {
    var currentUser = null;
    var menus = [];
    var SESSION_KEY_USER = 'CURRENT_USER';

    var path = cccisUrlUtils.getPath("/authentication/user/getCurrentUser");

    return {
        getCurrentUser: getCurrentUser,
        loadUser: loadUser,
        simulateLogin: simulateLogin,
        logout: function(){
            var path = cccisUrlUtils.getPath("/userAction/userLogout");

            var _self = this;
            var defer = $q.defer();
            Restangular.all(path).post({}, {}, {'Content-Type': 'application/json; charset=UTF-8'}).then(function (response) {
                if (response.result == cccisUrlUtils.RESULT.SUCCESS) {
                    currentUser = null;
                    menus = null;
                    window.sessionStorage.removeItem(SESSION_KEY_USER);
                    _self.loadUserMenuWithPromise().then(function (loadMenuResponse) {
                        if (loadMenuResponse.result == cccisUrlUtils.RESULT.SUCCESS) {
                            menus = loadMenuResponse.menus;
                        }
                        defer.resolve(response);
                    });
                }
            });
            return defer.promise;
        },
        clear: function () {
            currentUser = null;
        }
    };

    function getCurrentUser(){
        return currentUser;
    }


    function loadUser() {
        var deferred = $q.defer();
        if (currentUser == null) {
            var currentUserStr = window.sessionStorage.getItem(SESSION_KEY_USER);
            if (currentUserStr && currentUserStr!='null') {
                currentUser = JSON.parse(currentUserStr);
                deferred.resolve(currentUser);
            }else{
                var url = "/authentication/user/getCurrentUser";
                cccisUrlUtils.postFormData(url, {}).then(function (data) {
                    if (data.result == cccisUrlUtils.RESULT.SUCCESS) {
                        currentUser = data.user;
                        // window.sessionStorage.setItem(SESSION_KEY_USER, JSON.stringify(currentUser));
                        deferred.resolve(currentUser);
                    }else{
                        currentUser = null;
                        deferred.resolve(null);
                    }
                });
            }
        }else{
            deferred.resolve(currentUser);
        }
        return deferred.promise;
    }

    //模拟登录
    function simulateLogin(loginModel, silentFlag) {
        var deferred = $q.defer();

        if (loginModel == null) {
            console.error("error, param user is null");
            deferred.resolve(null);
        }else{
            cccisUrlUtils.postJsonData("/authentication/simulateLogin", loginModel, silentFlag).then(function(data){
                if (data.result == cccisUrlUtils.RESULT.SUCCESS) {
                    currentUser = data.user;
                    window.sessionStorage.setItem(SESSION_KEY_USER, JSON.stringify(currentUser));
                    deferred.resolve(data);
                }else{
                    currentUser = null;
                    window.sessionStorage.setItem(SESSION_KEY_USER, "");
                    deferred.resolve(data);
                }
            })
        }
        return deferred.promise;
    }

     function getCurrentUser() {
         if (currentUser == null) {
             var currentUserStr = window.sessionStorage.getItem(SESSION_KEY_USER);
             if (currentUserStr) {
                 currentUser = angular.fromJson(currentUserStr);
             }
         }
         return currentUser;
     }

}]);